// Code generated by fffi generator; DO NOT EDIT.
case 0x000007d0:
  {
    FFFI_FUNCTION_INVOCATION("NewImColorEditorForeignPtr")
    uintptr_t ptr;
    {
    ptr = (uintptr_t)(new TextEditor());
    sendEmptyString();
    sendValue(ptr);
    flushSend();
  }
  }
  break;
case 0x000007d1:
  {
    FFFI_FUNCTION_INVOCATION("Destroy")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    delete ((TextEditor*) foreignptr);
  }
  }
  break;
case 0x000007d2:
  {
    FFFI_FUNCTION_INVOCATION("Render")
    auto foreignptr = receiveValue<uintptr_t>();
    auto title = receiveString();
    {
    ((TextEditor*)foreignptr)->Render(title);
  }
  }
  break;
case 0x000007d3:
  {
    FFFI_FUNCTION_INVOCATION("RenderV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto title = receiveString();
    auto aSize = receiveArray<float,2>();
    auto aBorder = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->Render(title, aSize, aBorder);
  }
  }
  break;
case 0x000007d4:
  {
    FFFI_FUNCTION_INVOCATION("SetText")
    auto foreignptr = receiveValue<uintptr_t>();
    auto text = receiveString();
    {
    ((TextEditor*)foreignptr)->SetText(text);
  }
  }
  break;
case 0x000007d5:
  {
    FFFI_FUNCTION_INVOCATION("GetText")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * text;
    {
    auto text = ((TextEditor*)foreignptr)->GetText();
    sendEmptyString();
    sendString(text);
    flushSend();
  }
  }
  break;
case 0x000007d6:
  {
    FFFI_FUNCTION_INVOCATION("GetSelectedText")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * text;
    {
    auto text = ((TextEditor*)foreignptr)->GetSelectedText();
    sendEmptyString();
    sendString(text);
    flushSend();
  }
  }
  break;
case 0x000007d7:
  {
    FFFI_FUNCTION_INVOCATION("GetCurrentLineText")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * text;
    {
    auto text = ((TextEditor*)foreignptr)->GetCurrentLineText();
    sendEmptyString();
    sendString(text);
    flushSend();
  }
  }
  break;
case 0x000007d8:
  {
    FFFI_FUNCTION_INVOCATION("GetTotalLines")
    auto foreignptr = receiveValue<uintptr_t>();
    int lines;
    {
    lines = ((TextEditor*)foreignptr)->GetTotalLines();
    sendEmptyString();
    sendValueSignMagnitude<int>(lines);
    flushSend();
  }
  }
  break;
case 0x000007d9:
  {
    FFFI_FUNCTION_INVOCATION("IsOverwrite")
    auto foreignptr = receiveValue<uintptr_t>();
    bool overwrite;
    {
    overwrite = ((TextEditor*)foreignptr)->IsOverwrite();
    sendEmptyString();
    sendValue<bool>(overwrite);
    flushSend();
  }
  }
  break;
case 0x000007da:
  {
    FFFI_FUNCTION_INVOCATION("SetReadOnly")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetReadOnly(v);
  }
  }
  break;
case 0x000007db:
  {
    FFFI_FUNCTION_INVOCATION("IsReadOnly")
    auto foreignptr = receiveValue<uintptr_t>();
    bool readonly;
    {
    readonly = ((TextEditor*)foreignptr)->IsReadOnly();
    sendEmptyString();
    sendValue<bool>(readonly);
    flushSend();
  }
  }
  break;
case 0x000007dc:
  {
    FFFI_FUNCTION_INVOCATION("IsChanged")
    auto foreignptr = receiveValue<uintptr_t>();
    bool text;
    bool cursor;
    {
    auto p = ((TextEditor*)foreignptr);
cursor = p->IsCursorPositionChanged();
text = p->IsTextChanged();
    sendEmptyString();
    sendValue<bool>(text);
    sendValue<bool>(cursor);
    flushSend();
  }
  }
  break;
case 0x000007dd:
  {
    FFFI_FUNCTION_INVOCATION("IsColorizerEnabled")
    auto foreignptr = receiveValue<uintptr_t>();
    bool enabled;
    {
    enabled = ((TextEditor*)foreignptr)->IsColorizerEnabled();
    sendEmptyString();
    sendValue<bool>(enabled);
    flushSend();
  }
  }
  break;
case 0x000007de:
  {
    FFFI_FUNCTION_INVOCATION("SetColorizerEnable")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetColorizerEnable(v);
  }
  }
  break;
case 0x000007df:
  {
    FFFI_FUNCTION_INVOCATION("SetHandleMouseInputs")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetHandleMouseInputs(v);
  }
  }
  break;
case 0x000007e0:
  {
    FFFI_FUNCTION_INVOCATION("IsHandleMouseInputsEnabled")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsHandleMouseInputsEnabled();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x000007e1:
  {
    FFFI_FUNCTION_INVOCATION("SetHandleKeyboardInputs")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetHandleKeyboardInputs(v);
  }
  }
  break;
case 0x000007e2:
  {
    FFFI_FUNCTION_INVOCATION("IsHandleKeyboardInputsEnabled")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsHandleKeyboardInputsEnabled();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x000007e3:
  {
    FFFI_FUNCTION_INVOCATION("SetImGuiChildIgnored")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetImGuiChildIgnored(v);
  }
  }
  break;
case 0x000007e4:
  {
    FFFI_FUNCTION_INVOCATION("IsImGuiChildIgnored")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsImGuiChildIgnored();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x000007e5:
  {
    FFFI_FUNCTION_INVOCATION("SetShowWhitespaces")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetShowWhitespaces(v);
  }
  }
  break;
case 0x000007e6:
  {
    FFFI_FUNCTION_INVOCATION("IsShowingWhitespaces")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsShowingWhitespaces();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x000007e7:
  {
    FFFI_FUNCTION_INVOCATION("SetTabSize")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValueSignMagnitude<int>();
    {
    ((TextEditor*)foreignptr)->SetTabSize(v);
  }
  }
  break;
case 0x000007e8:
  {
    FFFI_FUNCTION_INVOCATION("GetTabSize")
    auto foreignptr = receiveValue<uintptr_t>();
    int v;
    {
    v = ((TextEditor*)foreignptr)->GetTabSize();
    sendEmptyString();
    sendValueSignMagnitude<int>(v);
    flushSend();
  }
  }
  break;
case 0x000007e9:
  {
    FFFI_FUNCTION_INVOCATION("InsertText")
    auto foreignptr = receiveValue<uintptr_t>();
    auto text = receiveString();
    {
    ((TextEditor*)foreignptr)->InsertText(text);
  }
  }
  break;
case 0x000007ea:
  {
    FFFI_FUNCTION_INVOCATION("MoveUp")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveUp();
  }
  }
  break;
case 0x000007eb:
  {
    FFFI_FUNCTION_INVOCATION("MoveUpV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveUp(amount,selectP);
  }
  }
  break;
case 0x000007ec:
  {
    FFFI_FUNCTION_INVOCATION("MoveDown")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveDown();
  }
  }
  break;
case 0x000007ed:
  {
    FFFI_FUNCTION_INVOCATION("MoveDownV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveDown(amount,selectP);
  }
  }
  break;
case 0x000007ee:
  {
    FFFI_FUNCTION_INVOCATION("MoveLeft")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveLeft();
  }
  }
  break;
case 0x000007ef:
  {
    FFFI_FUNCTION_INVOCATION("MoveLeftV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    auto wordMode = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveLeft(amount,selectP,wordMode);
  }
  }
  break;
case 0x000007f0:
  {
    FFFI_FUNCTION_INVOCATION("MoveRight")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveRight();
  }
  }
  break;
case 0x000007f1:
  {
    FFFI_FUNCTION_INVOCATION("MoveRightV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    auto wordMode = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveRight(amount,selectP,wordMode);
  }
  }
  break;
case 0x000007f2:
  {
    FFFI_FUNCTION_INVOCATION("MoveTop")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveTop();
  }
  }
  break;
case 0x000007f3:
  {
    FFFI_FUNCTION_INVOCATION("MoveTopV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveTop(selectP);
  }
  }
  break;
case 0x000007f4:
  {
    FFFI_FUNCTION_INVOCATION("MoveBottom")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveBottom();
  }
  }
  break;
case 0x000007f5:
  {
    FFFI_FUNCTION_INVOCATION("MoveBottomV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveBottom(selectP);
  }
  }
  break;
case 0x000007f6:
  {
    FFFI_FUNCTION_INVOCATION("MoveHome")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveHome();
  }
  }
  break;
case 0x000007f7:
  {
    FFFI_FUNCTION_INVOCATION("MoveHomeV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveHome(selectP);
  }
  }
  break;
case 0x000007f8:
  {
    FFFI_FUNCTION_INVOCATION("MoveEnd")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveEnd();
  }
  }
  break;
case 0x000007f9:
  {
    FFFI_FUNCTION_INVOCATION("MoveEndV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveEnd(selectP);
  }
  }
  break;
case 0x000007fa:
  {
    FFFI_FUNCTION_INVOCATION("SelectWordUnderCursor")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->SelectWordUnderCursor();
  }
  }
  break;
case 0x000007fb:
  {
    FFFI_FUNCTION_INVOCATION("SelectAll")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->SelectAll();
  }
  }
  break;
case 0x000007fc:
  {
    FFFI_FUNCTION_INVOCATION("HasSelection")
    auto foreignptr = receiveValue<uintptr_t>();
    bool has;
    {
    has = ((TextEditor*)foreignptr)->HasSelection();
    sendEmptyString();
    sendValue<bool>(has);
    flushSend();
  }
  }
  break;
case 0x000007fd:
  {
    FFFI_FUNCTION_INVOCATION("Copy")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Copy();
  }
  }
  break;
case 0x000007fe:
  {
    FFFI_FUNCTION_INVOCATION("Cut")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Cut();
  }
  }
  break;
case 0x000007ff:
  {
    FFFI_FUNCTION_INVOCATION("Paste")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Paste();
  }
  }
  break;
case 0x00000800:
  {
    FFFI_FUNCTION_INVOCATION("Delete")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Delete();
  }
  }
  break;
case 0x00000801:
  {
    FFFI_FUNCTION_INVOCATION("CanUndo")
    auto foreignptr = receiveValue<uintptr_t>();
    bool can;
    {
    can = ((TextEditor*)foreignptr)->CanUndo();
    sendEmptyString();
    sendValue<bool>(can);
    flushSend();
  }
  }
  break;
case 0x00000802:
  {
    FFFI_FUNCTION_INVOCATION("CanRedo")
    auto foreignptr = receiveValue<uintptr_t>();
    bool can;
    {
    can = ((TextEditor*)foreignptr)->CanRedo();
    sendEmptyString();
    sendValue<bool>(can);
    flushSend();
  }
  }
  break;
case 0x00000803:
  {
    FFFI_FUNCTION_INVOCATION("Undo")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Undo();
  }
  }
  break;
case 0x00000804:
  {
    FFFI_FUNCTION_INVOCATION("UndoV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto steps = receiveValueSignMagnitude<int>();
    {
    ((TextEditor*)foreignptr)->Undo(steps);
  }
  }
  break;
case 0x00000805:
  {
    FFFI_FUNCTION_INVOCATION("Redo")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Redo();
  }
  }
  break;
case 0x00000806:
  {
    FFFI_FUNCTION_INVOCATION("RedoV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto steps = receiveValueSignMagnitude<int>();
    {
    ((TextEditor*)foreignptr)->Redo(steps);
  }
  }
  break;
