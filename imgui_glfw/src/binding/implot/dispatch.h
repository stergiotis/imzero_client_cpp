// Code generated by fffi generator; DO NOT EDIT.
case 0x000003e8:
  {
    FFFI_FUNCTION_INVOCATION("GetLocationPos")
    auto outer_rect = receiveArray<float,4>();
    auto inner_size = receiveArray<float,2>();
    auto loc = receiveValueSignMagnitude<int>();
    auto pad = receiveArray<float,2>();
    float* r;
    {
    auto r = ImPlot::GetLocationPos(ImRect(outer_rect[0],outer_rect[1],outer_rect[2],outer_rect[3]), inner_size, loc, pad);
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x000003e9:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisTicks")
    auto idx = receiveValueSignMagnitude<int>();
    auto values = receiveSlice<double>();
    auto labels = receiveString();
    auto show_default = receiveValue<bool>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(labels,n_labels);
ImPlot::SetupAxisTicks(idx, values, (int)n_labels, ary_labels, show_default);
;
  }
  }
  break;
case 0x000003ea:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisTicksRange")
    auto idx = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    auto n_ticks = receiveValueSignMagnitude<int>();
    auto labels = receiveString();
    auto show_default = receiveValue<bool>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(labels,n_labels);
ImPlot::SetupAxisTicks(idx, v_min, v_max, (int)n_labels, ary_labels, show_default);
;
  }
  }
  break;
case 0x000003eb:
  {
    FFFI_FUNCTION_INVOCATION("AnnotationText")
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto col = receiveArray<float,4>();
    auto pix_offset = receiveArray<float,2>();
    auto clamp = receiveValue<bool>();
    auto text = receiveString();
    {
    ImPlot::Annotation(x, y, col, pix_offset, clamp, "%.*s", (int)getStringLength(text),text);
  }
  }
  break;
case 0x000003ec:
  {
    FFFI_FUNCTION_INVOCATION("GetStyleColorName")
    auto col = receiveValueSignMagnitude<int>();
    const char * r;
    {
    auto r = ImPlot::GetStyleColorName(col);
    sendEmptyString();
    sendString(r);
    flushSend();
  }
  }
  break;
case 0x000003ed:
  {
    FFFI_FUNCTION_INVOCATION("GetMarkerName")
    auto marker = receiveValueSignMagnitude<int>();
    const char * r;
    {
    auto r = ImPlot::GetMarkerName(marker);
    sendEmptyString();
    sendString(r);
    flushSend();
  }
  }
  break;
case 0x000003ee:
  {
    FFFI_FUNCTION_INVOCATION("GetAutoColor")
    auto idx = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::GetAutoColor(idx);
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x000003ef:
  {
    FFFI_FUNCTION_INVOCATION("NiceNum")
    auto x = receiveValue<double>();
    auto round = receiveValue<bool>();
    double r;
    {
    auto r = ImPlot::NiceNum(x, round);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000003f0:
  {
    FFFI_FUNCTION_INVOCATION("BustPlotCache")
    {
    ImPlot::BustPlotCache();
  }
  }
  break;
case 0x000003f1:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxis")
    auto axis = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxis(axis);
  }
  }
  break;
case 0x000003f2:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisV")
    auto axis = receiveValueSignMagnitude<int>();
    auto label = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxis(axis, label, flags);
  }
  }
  break;
case 0x000003f3:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisLimits")
    auto idx = receiveValueSignMagnitude<int>();
    auto min_lim = receiveValue<double>();
    auto max_lim = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxisLimits(idx, min_lim, max_lim, cond);
  }
  }
  break;
case 0x000003f4:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisFormat")
    auto idx = receiveValueSignMagnitude<int>();
    auto fmt = receiveString();
    {
    ImPlot::SetupAxisFormat(idx, fmt);
  }
  }
  break;
case 0x000003f5:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisScale")
    auto idx = receiveValueSignMagnitude<int>();
    auto scale = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxisScale(idx, scale);
  }
  }
  break;
case 0x000003f6:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisLimitsConstraints")
    auto idx = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    {
    ImPlot::SetupAxisLimitsConstraints(idx, v_min, v_max);
  }
  }
  break;
case 0x000003f7:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisZoomConstraints")
    auto idx = receiveValueSignMagnitude<int>();
    auto z_min = receiveValue<double>();
    auto z_max = receiveValue<double>();
    {
    ImPlot::SetupAxisZoomConstraints(idx, z_min, z_max);
  }
  }
  break;
case 0x000003f8:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxes")
    auto x_label = receiveString();
    auto y_label = receiveString();
    auto x_flags = receiveValueSignMagnitude<int>();
    auto y_flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxes(x_label, y_label, x_flags, y_flags);
  }
  }
  break;
case 0x000003f9:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxesLimits")
    auto x_min = receiveValue<double>();
    auto x_max = receiveValue<double>();
    auto y_min = receiveValue<double>();
    auto y_max = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxesLimits(x_min, x_max, y_min, y_max, cond);
  }
  }
  break;
case 0x000003fa:
  {
    FFFI_FUNCTION_INVOCATION("SetupLegend")
    auto location = receiveValueSignMagnitude<int>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupLegend(location, flags);
  }
  }
  break;
case 0x000003fb:
  {
    FFFI_FUNCTION_INVOCATION("SetupMouseText")
    auto location = receiveValueSignMagnitude<int>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupMouseText(location, flags);
  }
  }
  break;
case 0x000003fc:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxisLimits")
    auto axis = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    {
    ImPlot::SetNextAxisLimits(axis, v_min, v_max);
  }
  }
  break;
case 0x000003fd:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxisLimitsV")
    auto axis = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetNextAxisLimits(axis, v_min, v_max, cond);
  }
  }
  break;
case 0x000003fe:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxisToFit")
    auto axis = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetNextAxisToFit(axis);
  }
  }
  break;
case 0x000003ff:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxesLimits")
    auto x_min = receiveValue<double>();
    auto x_max = receiveValue<double>();
    auto y_min = receiveValue<double>();
    auto y_max = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetNextAxesLimits(x_min, x_max, y_min, y_max, cond);
  }
  }
  break;
case 0x00000400:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxesToFit")
    {
    ImPlot::SetNextAxesToFit();
  }
  }
  break;
case 0x00000401:
  {
    FFFI_FUNCTION_INVOCATION("BeginPlot")
    auto title_id = receiveString();
    bool r;
    {
    auto r = ImPlot::BeginPlot(title_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000402:
  {
    FFFI_FUNCTION_INVOCATION("BeginPlotV")
    auto title_id = receiveString();
    auto size = receiveArray<float,2>();
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginPlot(title_id, size, flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000403:
  {
    FFFI_FUNCTION_INVOCATION("SetupFinish")
    {
    ImPlot::SetupFinish();
  }
  }
  break;
case 0x00000404:
  {
    FFFI_FUNCTION_INVOCATION("EndPlot")
    {
    ImPlot::EndPlot();
  }
  }
  break;
case 0x00000405:
  {
    FFFI_FUNCTION_INVOCATION("SubplotNextCell")
    {
    ImPlot::SubplotNextCell();
  }
  }
  break;
case 0x00000406:
  {
    FFFI_FUNCTION_INVOCATION("BeginSubplots")
    auto title_id = receiveString();
    auto rows = receiveValueSignMagnitude<int>();
    auto cols = receiveValueSignMagnitude<int>();
    auto size = receiveArray<float,2>();
    bool r;
    {
    auto r = ImPlot::BeginSubplots(title_id, rows, cols, size);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000407:
  {
    FFFI_FUNCTION_INVOCATION("EndSubplots")
    {
    ImPlot::EndSubplots();
  }
  }
  break;
case 0x00000408:
  {
    FFFI_FUNCTION_INVOCATION("SetAxis")
    auto axis = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetAxis(axis);
  }
  }
  break;
case 0x00000409:
  {
    FFFI_FUNCTION_INVOCATION("SetAxes")
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetAxes(x_idx, y_idx);
  }
  }
  break;
case 0x0000040a:
  {
    FFFI_FUNCTION_INVOCATION("PixelsToPlot")
    auto x = receiveValue<float>();
    auto y = receiveValue<float>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    double* r;
    {
    auto r = ImPlot::PixelsToPlot(x, y, x_idx, y_idx);
    sendEmptyString();
    sendArray<double,2>(r);
    flushSend();
  }
  }
  break;
case 0x0000040b:
  {
    FFFI_FUNCTION_INVOCATION("PixelsToPlotImVec2")
    auto pix = receiveArray<float,2>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    double* r;
    {
    auto r = ImPlot::PixelsToPlot(pix, x_idx, y_idx);
    sendEmptyString();
    sendArray<double,2>(r);
    flushSend();
  }
  }
  break;
case 0x0000040c:
  {
    FFFI_FUNCTION_INVOCATION("PlotToPixels")
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::PlotToPixels(x, y, x_idx, y_idx);
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x0000040d:
  {
    FFFI_FUNCTION_INVOCATION("PlotToPixelsImPlotPoint")
    auto plt = receiveArray<double,2>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::PlotToPixels(plt, x_idx, y_idx);
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x0000040e:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotPos")
    float* r;
    {
    auto r = ImPlot::GetPlotPos();
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x0000040f:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotSize")
    float* r;
    {
    auto r = ImPlot::GetPlotSize();
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x00000410:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotMousePos")
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    double* r;
    {
    auto r = ImPlot::GetPlotMousePos(x_idx, y_idx);
    sendEmptyString();
    sendArray<double,2>(r);
    flushSend();
  }
  }
  break;
case 0x00000411:
  {
    FFFI_FUNCTION_INVOCATION("IsPlotHovered")
    bool r;
    {
    auto r = ImPlot::IsPlotHovered();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000412:
  {
    FFFI_FUNCTION_INVOCATION("IsAxisHovered")
    auto axis = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::IsAxisHovered(axis);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000413:
  {
    FFFI_FUNCTION_INVOCATION("IsSubplotsHovered")
    bool r;
    {
    auto r = ImPlot::IsSubplotsHovered();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000414:
  {
    FFFI_FUNCTION_INVOCATION("IsPlotSelected")
    bool r;
    {
    auto r = ImPlot::IsPlotSelected();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000415:
  {
    FFFI_FUNCTION_INVOCATION("CancelPlotSelection")
    {
    ImPlot::CancelPlotSelection();
  }
  }
  break;
case 0x00000416:
  {
    FFFI_FUNCTION_INVOCATION("HideNextItem")
    {
    ImPlot::HideNextItem();
  }
  }
  break;
case 0x00000417:
  {
    FFFI_FUNCTION_INVOCATION("HideNextItemV")
    auto hidden = receiveValue<bool>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::HideNextItem(hidden, cond);
  }
  }
  break;
case 0x00000418:
  {
    FFFI_FUNCTION_INVOCATION("Annotation")
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto col = receiveArray<float,4>();
    auto offset = receiveArray<float,2>();
    auto clamp = receiveValue<bool>();
    auto round = receiveValue<bool>();
    {
    ImPlot::Annotation(x, y, col, offset, clamp, round);
  }
  }
  break;
case 0x00000419:
  {
    FFFI_FUNCTION_INVOCATION("TagX")
    auto x = receiveValue<double>();
    auto color = receiveArray<float,4>();
    auto round = receiveValue<bool>();
    {
    ImPlot::TagX(x, color, round);
  }
  }
  break;
case 0x0000041a:
  {
    FFFI_FUNCTION_INVOCATION("TagY")
    auto y = receiveValue<double>();
    auto color = receiveArray<float,4>();
    auto round = receiveValue<bool>();
    {
    ImPlot::TagY(y, color, round);
  }
  }
  break;
case 0x0000041b:
  {
    FFFI_FUNCTION_INVOCATION("IsLegendEntryHovered")
    auto label_id = receiveString();
    bool r;
    {
    auto r = ImPlot::IsLegendEntryHovered(label_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000041c:
  {
    FFFI_FUNCTION_INVOCATION("BeginLegendPopup")
    auto label_id = receiveString();
    auto mouse_button = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginLegendPopup(label_id, mouse_button);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000041d:
  {
    FFFI_FUNCTION_INVOCATION("EndLegendPopup")
    {
    ImPlot::EndLegendPopup();
  }
  }
  break;
case 0x0000041e:
  {
    FFFI_FUNCTION_INVOCATION("ShowAltLegend")
    auto title_id = receiveString();
    auto vertical = receiveValue<bool>();
    auto size = receiveArray<float,2>();
    auto interactable = receiveValue<bool>();
    {
    ImPlot::ShowAltLegend(title_id, vertical, size, interactable);
  }
  }
  break;
case 0x0000041f:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropTargetPlot")
    bool r;
    {
    auto r = ImPlot::BeginDragDropTargetPlot();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000420:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropTargetAxis")
    auto axis = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropTargetAxis(axis);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000421:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropTargetLegend")
    bool r;
    {
    auto r = ImPlot::BeginDragDropTargetLegend();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000422:
  {
    FFFI_FUNCTION_INVOCATION("EndDragDropTarget")
    {
    ImPlot::EndDragDropTarget();
  }
  }
  break;
case 0x00000423:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourcePlot")
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourcePlot();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000424:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourcePlotV")
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourcePlot(flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000425:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourceAxis")
    auto idx = receiveValueSignMagnitude<int>();
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourceAxis(idx, flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000426:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourceItem")
    auto label_id = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourceItem(label_id, flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000427:
  {
    FFFI_FUNCTION_INVOCATION("EndDragDropSource")
    {
    ImPlot::EndDragDropSource();
  }
  }
  break;
case 0x00000428:
  {
    FFFI_FUNCTION_INVOCATION("BeginAlignedPlots")
    auto group_id = receiveString();
    bool r;
    {
    auto r = ImPlot::BeginAlignedPlots(group_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000429:
  {
    FFFI_FUNCTION_INVOCATION("BeginAlignedPlotsV")
    auto group_id = receiveString();
    auto vertical = receiveValue<bool>();
    bool r;
    {
    auto r = ImPlot::BeginAlignedPlots(group_id, vertical);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000042a:
  {
    FFFI_FUNCTION_INVOCATION("EndAlignedPlots")
    {
    ImPlot::EndAlignedPlots();
  }
  }
  break;
case 0x0000042b:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleColor")
    auto idx = receiveValueSignMagnitude<int>();
    auto col = receiveValue<uint32_t>();
    {
    ImPlot::PushStyleColor(idx, col);
  }
  }
  break;
case 0x0000042c:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleColorImVec4")
    auto idx = receiveValueSignMagnitude<int>();
    auto col = receiveArray<float,4>();
    {
    ImPlot::PushStyleColor(idx, col);
  }
  }
  break;
case 0x0000042d:
  {
    FFFI_FUNCTION_INVOCATION("PopStyleColor")
    auto count = receiveValueSignMagnitude<int>();
    {
    ImPlot::PopStyleColor(count);
  }
  }
  break;
case 0x0000042e:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleVar")
    auto idx = receiveValueSignMagnitude<int>();
    auto val = receiveValue<float>();
    {
    ImPlot::PushStyleVar(idx, val);
  }
  }
  break;
case 0x0000042f:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleVarInt")
    auto idx = receiveValueSignMagnitude<int>();
    auto val = receiveValueSignMagnitude<int>();
    {
    ImPlot::PushStyleVar(idx, val);
  }
  }
  break;
case 0x00000430:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleVarImVec2")
    auto idx = receiveValueSignMagnitude<int>();
    auto val = receiveArray<float,2>();
    {
    ImPlot::PushStyleVar(idx, val);
  }
  }
  break;
case 0x00000431:
  {
    FFFI_FUNCTION_INVOCATION("PopStyleVar")
    auto count = receiveValueSignMagnitude<int>();
    {
    ImPlot::PopStyleVar(count);
  }
  }
  break;
case 0x00000432:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapCount")
    int r;
    {
    auto r = ImPlot::GetColormapCount();
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x00000433:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapName")
    auto colormap = receiveValueSignMagnitude<int>();
    const char * r;
    {
    auto r = ImPlot::GetColormapName(colormap);
    sendEmptyString();
    sendString(r);
    flushSend();
  }
  }
  break;
case 0x00000434:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapIndex")
    auto name = receiveString();
    int r;
    {
    auto r = ImPlot::GetColormapIndex(name);
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x00000435:
  {
    FFFI_FUNCTION_INVOCATION("PushColormapById")
    auto colormap = receiveValueSignMagnitude<int>();
    {
    ImPlot::PushColormap(colormap);
  }
  }
  break;
case 0x00000436:
  {
    FFFI_FUNCTION_INVOCATION("PushColormap")
    auto name = receiveString();
    {
    ImPlot::PushColormap(name);
  }
  }
  break;
case 0x00000437:
  {
    FFFI_FUNCTION_INVOCATION("PopColormap")
    auto count = receiveValueSignMagnitude<int>();
    {
    ImPlot::PopColormap(count);
  }
  }
  break;
case 0x00000438:
  {
    FFFI_FUNCTION_INVOCATION("NextColormapColorU32")
    uint32_t r;
    {
    auto r = ImPlot::NextColormapColorU32();
    sendEmptyString();
    sendValue<uint32_t>(r);
    flushSend();
  }
  }
  break;
case 0x00000439:
  {
    FFFI_FUNCTION_INVOCATION("NextColormapColor")
    float* r;
    {
    auto r = ImPlot::NextColormapColor();
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x0000043a:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapSize")
    int r;
    {
    auto r = ImPlot::GetColormapSize();
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x0000043b:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapSizeV")
    auto cmap = receiveValueSignMagnitude<int>();
    int r;
    {
    auto r = ImPlot::GetColormapSize(cmap);
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x0000043c:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapColorU32")
    auto idx = receiveValueSignMagnitude<int>();
    auto cmap = receiveValueSignMagnitude<int>();
    uint32_t r;
    {
    auto r = ImPlot::GetColormapColorU32(idx, cmap);
    sendEmptyString();
    sendValue<uint32_t>(r);
    flushSend();
  }
  }
  break;
case 0x0000043d:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapColor")
    auto idx = receiveValueSignMagnitude<int>();
    auto cmap = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::GetColormapColor(idx, cmap);
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x0000043e:
  {
    FFFI_FUNCTION_INVOCATION("SampleColormapU32")
    auto t = receiveValue<float>();
    auto cmap = receiveValueSignMagnitude<int>();
    uint32_t r;
    {
    auto r = ImPlot::SampleColormapU32(t, cmap);
    sendEmptyString();
    sendValue<uint32_t>(r);
    flushSend();
  }
  }
  break;
case 0x0000043f:
  {
    FFFI_FUNCTION_INVOCATION("SampleColormap")
    auto t = receiveValue<float>();
    auto cmap = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::SampleColormap(t, cmap);
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x00000440:
  {
    FFFI_FUNCTION_INVOCATION("ColormapScale")
    auto label = receiveString();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto size = receiveArray<float,2>();
    auto format = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    auto cmap = receiveValueSignMagnitude<int>();
    {
    ImPlot::ColormapScale(label, scale_min, scale_max, size, format, flags, cmap);
  }
  }
  break;
case 0x00000441:
  {
    FFFI_FUNCTION_INVOCATION("ColormapButton")
    auto label = receiveString();
    auto size_arg = receiveArray<float,2>();
    auto cmap = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::ColormapButton(label, size_arg, cmap);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000442:
  {
    FFFI_FUNCTION_INVOCATION("ItemIcon")
    auto col = receiveArray<float,4>();
    {
    ImPlot::ItemIcon(col);
  }
  }
  break;
case 0x00000443:
  {
    FFFI_FUNCTION_INVOCATION("ItemIconUint32")
    auto col = receiveValue<uint32_t>();
    {
    ImPlot::ItemIcon(col);
  }
  }
  break;
case 0x00000444:
  {
    FFFI_FUNCTION_INVOCATION("ColormapIcon")
    auto cmap = receiveValueSignMagnitude<int>();
    {
    ImPlot::ColormapIcon(cmap);
  }
  }
  break;
case 0x00000445:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotDrawList")
    uintptr_t r;
    {
    auto r = ImPlot::GetPlotDrawList();
    sendEmptyString();
    sendValue(r);
    flushSend();
  }
  }
  break;
case 0x00000446:
  {
    FFFI_FUNCTION_INVOCATION("PushPlotClipRect")
    auto expand = receiveValue<float>();
    {
    ImPlot::PushPlotClipRect(expand);
  }
  }
  break;
case 0x00000447:
  {
    FFFI_FUNCTION_INVOCATION("PopPlotClipRect")
    {
    ImPlot::PopPlotClipRect();
  }
  }
  break;
case 0x00000448:
  {
    FFFI_FUNCTION_INVOCATION("ShowStyleSelector")
    auto label = receiveString();
    bool r;
    {
    auto r = ImPlot::ShowStyleSelector(label);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000449:
  {
    FFFI_FUNCTION_INVOCATION("ShowColormapSelector")
    auto label = receiveString();
    bool r;
    {
    auto r = ImPlot::ShowColormapSelector(label);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000044a:
  {
    FFFI_FUNCTION_INVOCATION("ShowInputMapSelector")
    auto label = receiveString();
    bool r;
    {
    auto r = ImPlot::ShowInputMapSelector(label);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000044b:
  {
    FFFI_FUNCTION_INVOCATION("ShowUserGuide")
    {
    ImPlot::ShowUserGuide();
  }
  }
  break;
case 0x0000044c:
  {
    FFFI_FUNCTION_INVOCATION("PlotImage")
    auto label_id = receiveString();
    auto user_texture_id = receiveValue<uintptr_t>();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    {
    ImPlot::PlotImage(label_id, ImTextureID(user_texture_id), bounds_min, bounds_max);
  }
  }
  break;
case 0x0000044d:
  {
    FFFI_FUNCTION_INVOCATION("PlotImageV")
    auto label_id = receiveString();
    auto user_texture_id = receiveValue<uintptr_t>();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto uv0 = receiveArray<float,2>();
    auto uv1 = receiveArray<float,2>();
    auto tint_col = receiveArray<float,4>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotImage(label_id, ImTextureID(user_texture_id), bounds_min, bounds_max, uv0, uv1, tint_col, flags);
  }
  }
  break;
case 0x0000044e:
  {
    FFFI_FUNCTION_INVOCATION("PlotText")
    auto text = receiveString();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    {
    ImPlot::PlotText(text, x, y);
  }
  }
  break;
case 0x0000044f:
  {
    FFFI_FUNCTION_INVOCATION("PlotTextV")
    auto text = receiveString();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto pix_offset = receiveArray<float,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotText(text, x, y, pix_offset, flags);
  }
  }
  break;
case 0x00000450:
  {
    FFFI_FUNCTION_INVOCATION("PlotDummy")
    auto label_id = receiveString();
    {
    ImPlot::PlotDummy(label_id);
  }
  }
  break;
case 0x00000451:
  {
    FFFI_FUNCTION_INVOCATION("PlotDummyV")
    auto label_id = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDummy(label_id, flags);
  }
  }
  break;
case 0x00000452:
  {
    FFFI_FUNCTION_INVOCATION("SetNextLineStyle")
    {
    ImPlot::SetNextLineStyle();
  }
  }
  break;
case 0x00000453:
  {
    FFFI_FUNCTION_INVOCATION("SetNextLineStyleV")
    auto col = receiveArray<float,4>();
    auto weight = receiveValue<float>();
    {
    ImPlot::SetNextLineStyle(col, weight);
  }
  }
  break;
case 0x00000454:
  {
    FFFI_FUNCTION_INVOCATION("SetNextFillStyle")
    {
    ImPlot::SetNextFillStyle();
  }
  }
  break;
case 0x00000455:
  {
    FFFI_FUNCTION_INVOCATION("SetNextFillStyleV")
    auto col = receiveArray<float,4>();
    auto alpha_mod = receiveValue<float>();
    {
    ImPlot::SetNextFillStyle(col, alpha_mod);
  }
  }
  break;
case 0x00000456:
  {
    FFFI_FUNCTION_INVOCATION("SetNextMarkerStyle")
    {
    ImPlot::SetNextMarkerStyle();
  }
  }
  break;
case 0x00000457:
  {
    FFFI_FUNCTION_INVOCATION("SetNextMarkerStyleV")
    auto marker = receiveValueSignMagnitude<int>();
    auto size = receiveValue<float>();
    auto fill = receiveArray<float,4>();
    auto weight = receiveValue<float>();
    auto outline = receiveArray<float,4>();
    {
    ImPlot::SetNextMarkerStyle(marker, size, fill, weight, outline);
  }
  }
  break;
case 0x00000458:
  {
    FFFI_FUNCTION_INVOCATION("SetNextErrorBarStyle")
    {
    ImPlot::SetNextErrorBarStyle();
  }
  }
  break;
case 0x00000459:
  {
    FFFI_FUNCTION_INVOCATION("SetNextErrorBarStyleV")
    auto col = receiveArray<float,4>();
    auto size = receiveValue<float>();
    auto weight = receiveValue<float>();
    {
    ImPlot::SetNextErrorBarStyle(col, size, weight);
  }
  }
  break;
case 0x0000045a:
  {
    FFFI_FUNCTION_INVOCATION("GetLastItemColor")
    float* r;
    {
    auto r = ImPlot::GetLastItemColor();
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x0000045b:
  {
    FFFI_FUNCTION_INVOCATION("BustColorCache")
    {
    ImPlot::BustColorCache();
  }
  }
  break;
case 0x0000045c:
  {
    FFFI_FUNCTION_INVOCATION("BustColorCacheV")
    auto plot_title_id = receiveString();
    {
    ImPlot::BustColorCache(plot_title_id);
  }
  }
  break;
case 0x0000045d:
  {
    FFFI_FUNCTION_INVOCATION("ShowDemoWindow")
    {
    ImPlot::ShowDemoWindow();
  }
  }
  break;
case 0x0000045e:
  {
    FFFI_FUNCTION_INVOCATION("BeginItem")
    auto label_id = receiveString();
    bool r;
    {
    auto r = ImPlot::BeginItem(label_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000045f:
  {
    FFFI_FUNCTION_INVOCATION("BeginItemV")
    auto label_id = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    auto recolor_from = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginItem(label_id, flags, recolor_from);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000460:
  {
    FFFI_FUNCTION_INVOCATION("EndItem")
    {
    ImPlot::EndItem();
  }
  }
  break;
case 0x00000461:
  {
    FFFI_FUNCTION_INVOCATION("BustItemCache")
    {
    ImPlot::BustItemCache();
  }
  }
  break;
case 0x00000462:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat32")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000463:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000464:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat64")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000465:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat64V")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000466:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000467:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000468:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000469:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000046a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000046b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000046c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000046d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000046e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000046f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000470:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000471:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000472:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000473:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000474:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000475:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000476:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000477:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000478:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000479:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000047a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000047b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x0000047c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x0000047d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000047e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000047f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000480:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000481:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000482:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000483:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000484:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000485:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000486:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000487:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000488:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000489:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000048a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000048b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x0000048c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x0000048d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000048e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000048f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000490:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000491:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000492:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000493:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000494:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000495:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000496:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000497:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000498:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000499:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000049a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000049b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x0000049c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x0000049d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000049e:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x0000049f:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004a0:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004a1:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004a2:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004a3:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004a4:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004a5:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004a6:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004a7:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004a8:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004a9:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004aa:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004ab:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004ac:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004ad:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004ae:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004af:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004b0:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x000004b1:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x000004b2:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto errs = receiveSlice<float>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004b3:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto errs = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004b4:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto neg = receiveSlice<float>();
    auto pos = receiveSlice<float>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004b5:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto neg = receiveSlice<float>();
    auto pos = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004b6:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto errs = receiveSlice<double>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004b7:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto errs = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004b8:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto neg = receiveSlice<double>();
    auto pos = receiveSlice<double>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004b9:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto neg = receiveSlice<double>();
    auto pos = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004ba:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto errs = receiveSlice<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004bb:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto errs = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004bc:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto neg = receiveSlice<int>();
    auto pos = receiveSlice<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004bd:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto neg = receiveSlice<int>();
    auto pos = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004be:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto errs = receiveSlice<int16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004bf:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto errs = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004c0:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto neg = receiveSlice<int16_t>();
    auto pos = receiveSlice<int16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004c1:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto neg = receiveSlice<int16_t>();
    auto pos = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004c2:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto errs = receiveSlice<int32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004c3:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto errs = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004c4:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto neg = receiveSlice<int32_t>();
    auto pos = receiveSlice<int32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004c5:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto neg = receiveSlice<int32_t>();
    auto pos = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004c6:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto errs = receiveSlice<int8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004c7:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto errs = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004c8:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto neg = receiveSlice<int8_t>();
    auto pos = receiveSlice<int8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004c9:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto neg = receiveSlice<int8_t>();
    auto pos = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004ca:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto errs = receiveSlice<unsigned>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004cb:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto errs = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004cc:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto neg = receiveSlice<unsigned>();
    auto pos = receiveSlice<unsigned>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004cd:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto neg = receiveSlice<unsigned>();
    auto pos = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004ce:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto errs = receiveSlice<uint16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004cf:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto errs = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004d0:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto neg = receiveSlice<uint16_t>();
    auto pos = receiveSlice<uint16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004d1:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto neg = receiveSlice<uint16_t>();
    auto pos = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004d2:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto errs = receiveSlice<uint32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004d3:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto errs = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004d4:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto neg = receiveSlice<uint32_t>();
    auto pos = receiveSlice<uint32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004d5:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto neg = receiveSlice<uint32_t>();
    auto pos = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004d6:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto errs = receiveSlice<uint8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000004d7:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto errs = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000004d8:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto neg = receiveSlice<uint8_t>();
    auto pos = receiveSlice<uint8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000004d9:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto neg = receiveSlice<uint8_t>();
    auto pos = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000004da:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004db:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004dc:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004dd:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004de:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004df:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004e0:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004e1:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004e2:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004e3:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004e4:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004e5:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004e6:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004e7:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004e8:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004e9:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004ea:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004eb:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004ec:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000004ed:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000004ee:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004ef:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f0:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f1:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f2:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f3:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f4:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f5:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f6:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f7:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f8:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004f9:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004fa:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004fb:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004fc:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004fd:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004fe:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000004ff:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000500:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000501:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000502:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000503:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000504:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000505:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000506:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000507:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000508:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000509:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x0000050a:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x0000050b:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x0000050c:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x0000050d:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x0000050e:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x0000050f:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000510:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000511:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000512:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000513:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000514:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000515:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x00000516:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000517:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000518:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000519:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000051a:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000051b:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000051c:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000051d:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000051e:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000051f:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000520:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000521:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000522:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000523:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000524:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000525:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000526:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000527:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000528:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000529:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000052a:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000052b:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000052c:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000052d:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000052e:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000052f:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000530:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000531:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000532:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000533:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000534:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000535:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000536:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000537:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000538:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000539:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000053a:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000053b:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000053c:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000053d:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000053e:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000053f:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000540:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000541:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000542:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000543:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000544:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000545:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000546:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000547:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000548:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000549:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000054a:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000054b:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000054c:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000054d:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000054e:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000054f:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000550:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000551:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000552:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat32")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000553:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000554:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat64")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000555:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat64V")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000556:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000557:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000558:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000559:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000055a:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000055b:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000055c:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000055d:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000055e:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000055f:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000560:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000561:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000562:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000563:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000564:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000565:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000566:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000567:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000568:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000569:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000056a:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000056b:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000056c:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000056d:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000056e:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000056f:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000570:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000571:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000572:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000573:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000574:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000575:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000576:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000577:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000578:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000579:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000057a:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000057b:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000057c:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000057d:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000057e:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000057f:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000580:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000581:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000582:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000583:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000584:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000585:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000586:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000587:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000588:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000589:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000058a:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000058b:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000058c:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000058d:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000058e:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000058f:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000590:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000591:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x00000592:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto y1s = receiveSlice<float>();
    auto y2s = receiveSlice<float>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x00000593:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto y1s = receiveSlice<float>();
    auto y2s = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x00000594:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000595:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000596:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000597:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x00000598:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto y1s = receiveSlice<double>();
    auto y2s = receiveSlice<double>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x00000599:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto y1s = receiveSlice<double>();
    auto y2s = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x0000059a:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000059b:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000059c:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000059d:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x0000059e:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto y1s = receiveSlice<int>();
    auto y2s = receiveSlice<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x0000059f:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2IntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto y1s = receiveSlice<int>();
    auto y2s = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005a0:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005a1:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005a2:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005a3:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005a4:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto y1s = receiveSlice<int16_t>();
    auto y2s = receiveSlice<int16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005a5:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto y1s = receiveSlice<int16_t>();
    auto y2s = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005a6:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005a7:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005a8:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005a9:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005aa:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto y1s = receiveSlice<int32_t>();
    auto y2s = receiveSlice<int32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005ab:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto y1s = receiveSlice<int32_t>();
    auto y2s = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005ac:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005ad:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005ae:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005af:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005b0:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto y1s = receiveSlice<int8_t>();
    auto y2s = receiveSlice<int8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005b1:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto y1s = receiveSlice<int8_t>();
    auto y2s = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005b2:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005b3:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005b4:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005b5:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005b6:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto y1s = receiveSlice<unsigned>();
    auto y2s = receiveSlice<unsigned>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005b7:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto y1s = receiveSlice<unsigned>();
    auto y2s = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005b8:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005b9:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005ba:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005bb:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005bc:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto y1s = receiveSlice<uint16_t>();
    auto y2s = receiveSlice<uint16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005bd:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto y1s = receiveSlice<uint16_t>();
    auto y2s = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005be:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005bf:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005c0:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005c1:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005c2:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto y1s = receiveSlice<uint32_t>();
    auto y2s = receiveSlice<uint32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005c3:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto y1s = receiveSlice<uint32_t>();
    auto y2s = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005c4:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005c5:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005c6:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005c7:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000005c8:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto y1s = receiveSlice<uint8_t>();
    auto y2s = receiveSlice<uint8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000005c9:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto y1s = receiveSlice<uint8_t>();
    auto y2s = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000005ca:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005cb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005cc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005cd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005ce:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005cf:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005d0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005d1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005d2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005d3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005d4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005d5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005d6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005d7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005d8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005d9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005da:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005db:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005dc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005dd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005de:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005df:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005e0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005e1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005e2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005e3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005e4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005e5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005e6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005e7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005e8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005e9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005ea:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005eb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005ec:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005ed:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005ee:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000005ef:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000005f0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005f1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000005f2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005f3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000005f4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005f5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000005f6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005f7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000005f8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005f9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000005fa:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005fb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000005fc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000005fd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000005fe:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000005ff:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000600:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000601:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x00000602:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000603:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000604:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000605:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x00000606:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000607:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000608:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000609:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x0000060a:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000060b:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x0000060c:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000060d:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x0000060e:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000060f:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000610:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000611:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x00000612:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000613:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000614:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000615:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x00000616:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000617:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000618:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000619:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x0000061a:
  {
    FFFI_FUNCTION_INVOCATION("loadStyle")
    auto ptr = receiveValue<uintptr_t>();
    auto bs = receiveSlice<bool>();
    auto fs = receiveSlice<float>();
    auto vec2s = receiveSlice<float>();
    auto cols = receiveSlice<float>();
    auto markers = receiveSlice<int>();
    auto maps = receiveSlice<int>();
    {
    
    auto s = (ImPlotStyle*)ptr;
	int i;
	
#define ASSIGN(l,r) ((l) = (r))
	i = 0;
    ASSIGN(s->UseLocalTime, bs[i++]);
    ASSIGN(s->UseISO8601, bs[i++]);
    ASSIGN(s->Use24HourClock, bs[i++]);

	i = 0;
	ASSIGN(s->LineWeight, fs[i++]);
	ASSIGN(s->MarkerSize, fs[i++]);
	ASSIGN(s->MarkerWeight, fs[i++]);
	ASSIGN(s->FillAlpha, fs[i++]);
	ASSIGN(s->ErrorBarSize, fs[i++]);
	ASSIGN(s->ErrorBarWeight, fs[i++]);
	ASSIGN(s->DigitalBitHeight, fs[i++]);
	ASSIGN(s->DigitalBitGap, fs[i++]);
	ASSIGN(s->PlotBorderSize, fs[i++]);
	ASSIGN(s->MinorAlpha, fs[i++]);
	
	i = 0;
	ASSIGN(s->MajorTickLen.x, vec2s[i++]);
	ASSIGN(s->MajorTickLen.y, vec2s[i++]);
	ASSIGN(s->MinorTickLen.x, vec2s[i++]);
	ASSIGN(s->MinorTickLen.y, vec2s[i++]);
	ASSIGN(s->MajorTickSize.x, vec2s[i++]);
	ASSIGN(s->MajorTickSize.y, vec2s[i++]);
	ASSIGN(s->MinorTickSize.x, vec2s[i++]);
	ASSIGN(s->MinorTickSize.y, vec2s[i++]);
	ASSIGN(s->MajorGridSize.x, vec2s[i++]);
	ASSIGN(s->MajorGridSize.y, vec2s[i++]);
	ASSIGN(s->MinorGridSize.x, vec2s[i++]);
	ASSIGN(s->MinorGridSize.y, vec2s[i++]);
	ASSIGN(s->PlotPadding.x, vec2s[i++]);
	ASSIGN(s->PlotPadding.y, vec2s[i++]);
	ASSIGN(s->LabelPadding.x, vec2s[i++]);
	ASSIGN(s->LabelPadding.y, vec2s[i++]);
	ASSIGN(s->LegendPadding.x, vec2s[i++]);
	ASSIGN(s->LegendPadding.y, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.x, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.y, vec2s[i++]);
	ASSIGN(s->LegendSpacing.x, vec2s[i++]);
	ASSIGN(s->LegendSpacing.y, vec2s[i++]);
	ASSIGN(s->MousePosPadding.x, vec2s[i++]);
	ASSIGN(s->MousePosPadding.y, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.x, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.y, vec2s[i++]);
	ASSIGN(s->FitPadding.x, vec2s[i++]);
	ASSIGN(s->FitPadding.y, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.x, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.y, vec2s[i++]);
	ASSIGN(s->PlotMinSize.x, vec2s[i++]);
	ASSIGN(s->PlotMinSize.y, vec2s[i++]);

	i = 0;
    for(i = 0;i<ImPlotCol_COUNT;i++) {
		 ASSIGN(s->Colors[i].x, cols[i*4+0]);
		 ASSIGN(s->Colors[i].y, cols[i*4+1]);
		 ASSIGN(s->Colors[i].z, cols[i*4+2]);
		 ASSIGN(s->Colors[i].w, cols[i*4+3]);
	}

	i = 0;
    ASSIGN(s->Colormap, maps[i++]);
#undef ASSIGN
;
  }
  }
  break;
case 0x0000061b:
  {
    FFFI_FUNCTION_INVOCATION("GetStyle")
    uintptr_t r;
    {
    r = (uintptr_t)&ImPlot::GetStyle();
    sendEmptyString();
    sendValue(r);
    flushSend();
  }
  }
  break;
case 0x0000061c:
  {
    FFFI_FUNCTION_INVOCATION("dumpStyle")
    auto ptr = receiveValue<uintptr_t>();
    bool* bs;
    float* fs;
    float* vec2s;
    float* cols;
    int* markers;
    int* maps;
    {
    
	auto s = (ImPlotStyle*)ptr;
	size_t bs_len = 3;
    bs = (decltype(bs))arenaCalloc(bs_len,sizeof(*bs));
	size_t fs_len = 10;
    fs = (decltype(fs))arenaCalloc(fs_len,sizeof(*fs));
	size_t vec2s_len = 16*2;
    vec2s = (decltype(vec2s))arenaCalloc(vec2s_len,sizeof(*vec2s));
	size_t cols_len = 4*ImPlotCol_COUNT;
    cols = (decltype(cols))arenaCalloc(cols_len,sizeof(*cols));
	size_t markers_len = 2;
    markers = (decltype(markers))arenaCalloc(markers_len,sizeof(*markers));
	size_t maps_len = 1;
    maps = (decltype(maps))arenaCalloc(maps_len,sizeof(*maps));

	int i;
	
#define ASSIGN(l,r) ((r) = (l))
	i = 0;
    ASSIGN(s->UseLocalTime, bs[i++]);
    ASSIGN(s->UseISO8601, bs[i++]);
    ASSIGN(s->Use24HourClock, bs[i++]);

	i = 0;
	ASSIGN(s->LineWeight, fs[i++]);
	ASSIGN(s->MarkerSize, fs[i++]);
	ASSIGN(s->MarkerWeight, fs[i++]);
	ASSIGN(s->FillAlpha, fs[i++]);
	ASSIGN(s->ErrorBarSize, fs[i++]);
	ASSIGN(s->ErrorBarWeight, fs[i++]);
	ASSIGN(s->DigitalBitHeight, fs[i++]);
	ASSIGN(s->DigitalBitGap, fs[i++]);
	ASSIGN(s->PlotBorderSize, fs[i++]);
	ASSIGN(s->MinorAlpha, fs[i++]);
	
	i = 0;
	ASSIGN(s->MajorTickLen.x, vec2s[i++]);
	ASSIGN(s->MajorTickLen.y, vec2s[i++]);
	ASSIGN(s->MinorTickLen.x, vec2s[i++]);
	ASSIGN(s->MinorTickLen.y, vec2s[i++]);
	ASSIGN(s->MajorTickSize.x, vec2s[i++]);
	ASSIGN(s->MajorTickSize.y, vec2s[i++]);
	ASSIGN(s->MinorTickSize.x, vec2s[i++]);
	ASSIGN(s->MinorTickSize.y, vec2s[i++]);
	ASSIGN(s->MajorGridSize.x, vec2s[i++]);
	ASSIGN(s->MajorGridSize.y, vec2s[i++]);
	ASSIGN(s->MinorGridSize.x, vec2s[i++]);
	ASSIGN(s->MinorGridSize.y, vec2s[i++]);
	ASSIGN(s->PlotPadding.x, vec2s[i++]);
	ASSIGN(s->PlotPadding.y, vec2s[i++]);
	ASSIGN(s->LabelPadding.x, vec2s[i++]);
	ASSIGN(s->LabelPadding.y, vec2s[i++]);
	ASSIGN(s->LegendPadding.x, vec2s[i++]);
	ASSIGN(s->LegendPadding.y, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.x, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.y, vec2s[i++]);
	ASSIGN(s->LegendSpacing.x, vec2s[i++]);
	ASSIGN(s->LegendSpacing.y, vec2s[i++]);
	ASSIGN(s->MousePosPadding.x, vec2s[i++]);
	ASSIGN(s->MousePosPadding.y, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.x, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.y, vec2s[i++]);
	ASSIGN(s->FitPadding.x, vec2s[i++]);
	ASSIGN(s->FitPadding.y, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.x, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.y, vec2s[i++]);
	ASSIGN(s->PlotMinSize.x, vec2s[i++]);
	ASSIGN(s->PlotMinSize.y, vec2s[i++]);

	i = 0;
    for(i = 0;i<ImPlotCol_COUNT;i++) {
		 ASSIGN(s->Colors[i].x, cols[i*4+0]);
		 ASSIGN(s->Colors[i].y, cols[i*4+1]);
		 ASSIGN(s->Colors[i].z, cols[i*4+2]);
		 ASSIGN(s->Colors[i].w, cols[i*4+3]);
	}

	i = 0;
    ASSIGN(s->Colormap, maps[i++]);
#undef ASSIGN
;
    sendEmptyString();
    sendSlice<bool>(bs,bs_len);
    sendSlice<float>(fs,fs_len);
    sendSlice<float>(vec2s,vec2s_len);
    sendSlice<float>(cols,cols_len);
    sendSlice<int>(markers,markers_len);
    sendSlice<int>(maps,maps_len);
    flushSend();
  }
  }
  break;
