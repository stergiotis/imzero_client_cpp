// Code generated by fffi generator; DO NOT EDIT.
case 0x000007d0:
  {
    FFFI_FUNCTION_INVOCATION("GetLocationPos")
    auto outer_rect = receiveArray<float,4>();
    auto inner_size = receiveArray<float,2>();
    auto loc = receiveValueSignMagnitude<int>();
    auto pad = receiveArray<float,2>();
    float* r;
    {
    auto r = ImPlot::GetLocationPos(ImRect(outer_rect[0],outer_rect[1],outer_rect[2],outer_rect[3]), inner_size, loc, pad);
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007d1:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisTicks")
    auto idx = receiveValueSignMagnitude<int>();
    auto values = receiveSlice<double>();
    auto labels = receiveString();
    auto show_default = receiveValue<bool>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(labels,n_labels);
ImPlot::SetupAxisTicks(idx, values, (int)n_labels, ary_labels, show_default);
;
  }
  }
  break;
case 0x000007d2:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisTicksRange")
    auto idx = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    auto n_ticks = receiveValueSignMagnitude<int>();
    auto labels = receiveString();
    auto show_default = receiveValue<bool>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(labels,n_labels);
ImPlot::SetupAxisTicks(idx, v_min, v_max, (int)n_labels, ary_labels, show_default);
;
  }
  }
  break;
case 0x000007d3:
  {
    FFFI_FUNCTION_INVOCATION("AnnotationText")
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto col = receiveArray<float,4>();
    auto pix_offset = receiveArray<float,2>();
    auto clamp = receiveValue<bool>();
    auto text = receiveString();
    {
    ImPlot::Annotation(x, y, col, pix_offset, clamp, "%.*s", (int)getStringLength(text),text);
  }
  }
  break;
case 0x000007d4:
  {
    FFFI_FUNCTION_INVOCATION("GetStyleColorName")
    auto col = receiveValueSignMagnitude<int>();
    const char * r;
    {
    auto r = ImPlot::GetStyleColorName(col);
    sendEmptyString();
    sendString(r);
    flushSend();
  }
  }
  break;
case 0x000007d5:
  {
    FFFI_FUNCTION_INVOCATION("GetMarkerName")
    auto marker = receiveValueSignMagnitude<int>();
    const char * r;
    {
    auto r = ImPlot::GetMarkerName(marker);
    sendEmptyString();
    sendString(r);
    flushSend();
  }
  }
  break;
case 0x000007d6:
  {
    FFFI_FUNCTION_INVOCATION("GetAutoColor")
    auto idx = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::GetAutoColor(idx);
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x000007d7:
  {
    FFFI_FUNCTION_INVOCATION("NiceNum")
    auto x = receiveValue<double>();
    auto round = receiveValue<bool>();
    double r;
    {
    auto r = ImPlot::NiceNum(x, round);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000007d8:
  {
    FFFI_FUNCTION_INVOCATION("BustPlotCache")
    {
    ImPlot::BustPlotCache();
  }
  }
  break;
case 0x000007d9:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxis")
    auto axis = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxis(axis);
  }
  }
  break;
case 0x000007da:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisV")
    auto axis = receiveValueSignMagnitude<int>();
    auto label = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxis(axis, label, flags);
  }
  }
  break;
case 0x000007db:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisLimits")
    auto idx = receiveValueSignMagnitude<int>();
    auto min_lim = receiveValue<double>();
    auto max_lim = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxisLimits(idx, min_lim, max_lim, cond);
  }
  }
  break;
case 0x000007dc:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisFormat")
    auto idx = receiveValueSignMagnitude<int>();
    auto fmt = receiveString();
    {
    ImPlot::SetupAxisFormat(idx, fmt);
  }
  }
  break;
case 0x000007dd:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisScale")
    auto idx = receiveValueSignMagnitude<int>();
    auto scale = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxisScale(idx, scale);
  }
  }
  break;
case 0x000007de:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisLimitsConstraints")
    auto idx = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    {
    ImPlot::SetupAxisLimitsConstraints(idx, v_min, v_max);
  }
  }
  break;
case 0x000007df:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxisZoomConstraints")
    auto idx = receiveValueSignMagnitude<int>();
    auto z_min = receiveValue<double>();
    auto z_max = receiveValue<double>();
    {
    ImPlot::SetupAxisZoomConstraints(idx, z_min, z_max);
  }
  }
  break;
case 0x000007e0:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxes")
    auto x_label = receiveString();
    auto y_label = receiveString();
    auto x_flags = receiveValueSignMagnitude<int>();
    auto y_flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxes(x_label, y_label, x_flags, y_flags);
  }
  }
  break;
case 0x000007e1:
  {
    FFFI_FUNCTION_INVOCATION("SetupAxesLimits")
    auto x_min = receiveValue<double>();
    auto x_max = receiveValue<double>();
    auto y_min = receiveValue<double>();
    auto y_max = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupAxesLimits(x_min, x_max, y_min, y_max, cond);
  }
  }
  break;
case 0x000007e2:
  {
    FFFI_FUNCTION_INVOCATION("SetupLegend")
    auto location = receiveValueSignMagnitude<int>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupLegend(location, flags);
  }
  }
  break;
case 0x000007e3:
  {
    FFFI_FUNCTION_INVOCATION("SetupMouseText")
    auto location = receiveValueSignMagnitude<int>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetupMouseText(location, flags);
  }
  }
  break;
case 0x000007e4:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxisLimits")
    auto axis = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    {
    ImPlot::SetNextAxisLimits(axis, v_min, v_max);
  }
  }
  break;
case 0x000007e5:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxisLimitsV")
    auto axis = receiveValueSignMagnitude<int>();
    auto v_min = receiveValue<double>();
    auto v_max = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetNextAxisLimits(axis, v_min, v_max, cond);
  }
  }
  break;
case 0x000007e6:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxisToFit")
    auto axis = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetNextAxisToFit(axis);
  }
  }
  break;
case 0x000007e7:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxesLimits")
    auto x_min = receiveValue<double>();
    auto x_max = receiveValue<double>();
    auto y_min = receiveValue<double>();
    auto y_max = receiveValue<double>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetNextAxesLimits(x_min, x_max, y_min, y_max, cond);
  }
  }
  break;
case 0x000007e8:
  {
    FFFI_FUNCTION_INVOCATION("SetNextAxesToFit")
    {
    ImPlot::SetNextAxesToFit();
  }
  }
  break;
case 0x000007e9:
  {
    FFFI_FUNCTION_INVOCATION("BeginPlot")
    auto title_id = receiveString();
    bool r;
    {
    auto r = ImPlot::BeginPlot(title_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007ea:
  {
    FFFI_FUNCTION_INVOCATION("BeginPlotV")
    auto title_id = receiveString();
    auto size = receiveArray<float,2>();
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginPlot(title_id, size, flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007eb:
  {
    FFFI_FUNCTION_INVOCATION("SetupFinish")
    {
    ImPlot::SetupFinish();
  }
  }
  break;
case 0x000007ec:
  {
    FFFI_FUNCTION_INVOCATION("EndPlot")
    {
    ImPlot::EndPlot();
  }
  }
  break;
case 0x000007ed:
  {
    FFFI_FUNCTION_INVOCATION("SubplotNextCell")
    {
    ImPlot::SubplotNextCell();
  }
  }
  break;
case 0x000007ee:
  {
    FFFI_FUNCTION_INVOCATION("BeginSubplots")
    auto title_id = receiveString();
    auto rows = receiveValueSignMagnitude<int>();
    auto cols = receiveValueSignMagnitude<int>();
    auto size = receiveArray<float,2>();
    bool r;
    {
    auto r = ImPlot::BeginSubplots(title_id, rows, cols, size);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007ef:
  {
    FFFI_FUNCTION_INVOCATION("EndSubplots")
    {
    ImPlot::EndSubplots();
  }
  }
  break;
case 0x000007f0:
  {
    FFFI_FUNCTION_INVOCATION("SetAxis")
    auto axis = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetAxis(axis);
  }
  }
  break;
case 0x000007f1:
  {
    FFFI_FUNCTION_INVOCATION("SetAxes")
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    {
    ImPlot::SetAxes(x_idx, y_idx);
  }
  }
  break;
case 0x000007f2:
  {
    FFFI_FUNCTION_INVOCATION("PixelsToPlot")
    auto x = receiveValue<float>();
    auto y = receiveValue<float>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    double* r;
    {
    auto r = ImPlot::PixelsToPlot(x, y, x_idx, y_idx);
    sendEmptyString();
    sendArray<double,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f3:
  {
    FFFI_FUNCTION_INVOCATION("PixelsToPlotImVec2")
    auto pix = receiveArray<float,2>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    double* r;
    {
    auto r = ImPlot::PixelsToPlot(pix, x_idx, y_idx);
    sendEmptyString();
    sendArray<double,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f4:
  {
    FFFI_FUNCTION_INVOCATION("PlotToPixels")
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::PlotToPixels(x, y, x_idx, y_idx);
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f5:
  {
    FFFI_FUNCTION_INVOCATION("PlotToPixelsImPlotPoint")
    auto plt = receiveArray<double,2>();
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::PlotToPixels(plt, x_idx, y_idx);
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f6:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotPos")
    float* r;
    {
    auto r = ImPlot::GetPlotPos();
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f7:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotSize")
    float* r;
    {
    auto r = ImPlot::GetPlotSize();
    sendEmptyString();
    sendArray<float,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f8:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotMousePos")
    auto x_idx = receiveValueSignMagnitude<int>();
    auto y_idx = receiveValueSignMagnitude<int>();
    double* r;
    {
    auto r = ImPlot::GetPlotMousePos(x_idx, y_idx);
    sendEmptyString();
    sendArray<double,2>(r);
    flushSend();
  }
  }
  break;
case 0x000007f9:
  {
    FFFI_FUNCTION_INVOCATION("IsPlotHovered")
    bool r;
    {
    auto r = ImPlot::IsPlotHovered();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007fa:
  {
    FFFI_FUNCTION_INVOCATION("IsAxisHovered")
    auto axis = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::IsAxisHovered(axis);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007fb:
  {
    FFFI_FUNCTION_INVOCATION("IsSubplotsHovered")
    bool r;
    {
    auto r = ImPlot::IsSubplotsHovered();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007fc:
  {
    FFFI_FUNCTION_INVOCATION("IsPlotSelected")
    bool r;
    {
    auto r = ImPlot::IsPlotSelected();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x000007fd:
  {
    FFFI_FUNCTION_INVOCATION("CancelPlotSelection")
    {
    ImPlot::CancelPlotSelection();
  }
  }
  break;
case 0x000007fe:
  {
    FFFI_FUNCTION_INVOCATION("HideNextItem")
    {
    ImPlot::HideNextItem();
  }
  }
  break;
case 0x000007ff:
  {
    FFFI_FUNCTION_INVOCATION("HideNextItemV")
    auto hidden = receiveValue<bool>();
    auto cond = receiveValueSignMagnitude<int>();
    {
    ImPlot::HideNextItem(hidden, cond);
  }
  }
  break;
case 0x00000800:
  {
    FFFI_FUNCTION_INVOCATION("Annotation")
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto col = receiveArray<float,4>();
    auto offset = receiveArray<float,2>();
    auto clamp = receiveValue<bool>();
    auto round = receiveValue<bool>();
    {
    ImPlot::Annotation(x, y, col, offset, clamp, round);
  }
  }
  break;
case 0x00000801:
  {
    FFFI_FUNCTION_INVOCATION("TagX")
    auto x = receiveValue<double>();
    auto color = receiveArray<float,4>();
    auto round = receiveValue<bool>();
    {
    ImPlot::TagX(x, color, round);
  }
  }
  break;
case 0x00000802:
  {
    FFFI_FUNCTION_INVOCATION("TagY")
    auto y = receiveValue<double>();
    auto color = receiveArray<float,4>();
    auto round = receiveValue<bool>();
    {
    ImPlot::TagY(y, color, round);
  }
  }
  break;
case 0x00000803:
  {
    FFFI_FUNCTION_INVOCATION("IsLegendEntryHovered")
    auto label_id = receiveString();
    bool r;
    {
    auto r = ImPlot::IsLegendEntryHovered(label_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000804:
  {
    FFFI_FUNCTION_INVOCATION("BeginLegendPopup")
    auto label_id = receiveString();
    auto mouse_button = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginLegendPopup(label_id, mouse_button);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000805:
  {
    FFFI_FUNCTION_INVOCATION("EndLegendPopup")
    {
    ImPlot::EndLegendPopup();
  }
  }
  break;
case 0x00000806:
  {
    FFFI_FUNCTION_INVOCATION("ShowAltLegend")
    auto title_id = receiveString();
    auto vertical = receiveValue<bool>();
    auto size = receiveArray<float,2>();
    auto interactable = receiveValue<bool>();
    {
    ImPlot::ShowAltLegend(title_id, vertical, size, interactable);
  }
  }
  break;
case 0x00000807:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropTargetPlot")
    bool r;
    {
    auto r = ImPlot::BeginDragDropTargetPlot();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000808:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropTargetAxis")
    auto axis = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropTargetAxis(axis);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000809:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropTargetLegend")
    bool r;
    {
    auto r = ImPlot::BeginDragDropTargetLegend();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000080a:
  {
    FFFI_FUNCTION_INVOCATION("EndDragDropTarget")
    {
    ImPlot::EndDragDropTarget();
  }
  }
  break;
case 0x0000080b:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourcePlot")
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourcePlot();
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000080c:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourcePlotV")
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourcePlot(flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000080d:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourceAxis")
    auto idx = receiveValueSignMagnitude<int>();
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourceAxis(idx, flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000080e:
  {
    FFFI_FUNCTION_INVOCATION("BeginDragDropSourceItem")
    auto label_id = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginDragDropSourceItem(label_id, flags);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000080f:
  {
    FFFI_FUNCTION_INVOCATION("EndDragDropSource")
    {
    ImPlot::EndDragDropSource();
  }
  }
  break;
case 0x00000810:
  {
    FFFI_FUNCTION_INVOCATION("BeginAlignedPlots")
    auto group_id = receiveString();
    bool r;
    {
    auto r = ImPlot::BeginAlignedPlots(group_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000811:
  {
    FFFI_FUNCTION_INVOCATION("BeginAlignedPlotsV")
    auto group_id = receiveString();
    auto vertical = receiveValue<bool>();
    bool r;
    {
    auto r = ImPlot::BeginAlignedPlots(group_id, vertical);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000812:
  {
    FFFI_FUNCTION_INVOCATION("EndAlignedPlots")
    {
    ImPlot::EndAlignedPlots();
  }
  }
  break;
case 0x00000813:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleColor")
    auto idx = receiveValueSignMagnitude<int>();
    auto col = receiveValue<uint32_t>();
    {
    ImPlot::PushStyleColor(idx, col);
  }
  }
  break;
case 0x00000814:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleColorImVec4")
    auto idx = receiveValueSignMagnitude<int>();
    auto col = receiveArray<float,4>();
    {
    ImPlot::PushStyleColor(idx, col);
  }
  }
  break;
case 0x00000815:
  {
    FFFI_FUNCTION_INVOCATION("PopStyleColor")
    auto count = receiveValueSignMagnitude<int>();
    {
    ImPlot::PopStyleColor(count);
  }
  }
  break;
case 0x00000816:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleVar")
    auto idx = receiveValueSignMagnitude<int>();
    auto val = receiveValue<float>();
    {
    ImPlot::PushStyleVar(idx, val);
  }
  }
  break;
case 0x00000817:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleVarInt")
    auto idx = receiveValueSignMagnitude<int>();
    auto val = receiveValueSignMagnitude<int>();
    {
    ImPlot::PushStyleVar(idx, val);
  }
  }
  break;
case 0x00000818:
  {
    FFFI_FUNCTION_INVOCATION("PushStyleVarImVec2")
    auto idx = receiveValueSignMagnitude<int>();
    auto val = receiveArray<float,2>();
    {
    ImPlot::PushStyleVar(idx, val);
  }
  }
  break;
case 0x00000819:
  {
    FFFI_FUNCTION_INVOCATION("PopStyleVar")
    auto count = receiveValueSignMagnitude<int>();
    {
    ImPlot::PopStyleVar(count);
  }
  }
  break;
case 0x0000081a:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapCount")
    int r;
    {
    auto r = ImPlot::GetColormapCount();
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x0000081b:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapName")
    auto colormap = receiveValueSignMagnitude<int>();
    const char * r;
    {
    auto r = ImPlot::GetColormapName(colormap);
    sendEmptyString();
    sendString(r);
    flushSend();
  }
  }
  break;
case 0x0000081c:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapIndex")
    auto name = receiveString();
    int r;
    {
    auto r = ImPlot::GetColormapIndex(name);
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x0000081d:
  {
    FFFI_FUNCTION_INVOCATION("PushColormapById")
    auto colormap = receiveValueSignMagnitude<int>();
    {
    ImPlot::PushColormap(colormap);
  }
  }
  break;
case 0x0000081e:
  {
    FFFI_FUNCTION_INVOCATION("PushColormap")
    auto name = receiveString();
    {
    ImPlot::PushColormap(name);
  }
  }
  break;
case 0x0000081f:
  {
    FFFI_FUNCTION_INVOCATION("PopColormap")
    auto count = receiveValueSignMagnitude<int>();
    {
    ImPlot::PopColormap(count);
  }
  }
  break;
case 0x00000820:
  {
    FFFI_FUNCTION_INVOCATION("NextColormapColorU32")
    uint32_t r;
    {
    auto r = ImPlot::NextColormapColorU32();
    sendEmptyString();
    sendValue<uint32_t>(r);
    flushSend();
  }
  }
  break;
case 0x00000821:
  {
    FFFI_FUNCTION_INVOCATION("NextColormapColor")
    float* r;
    {
    auto r = ImPlot::NextColormapColor();
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x00000822:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapSize")
    int r;
    {
    auto r = ImPlot::GetColormapSize();
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x00000823:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapSizeV")
    auto cmap = receiveValueSignMagnitude<int>();
    int r;
    {
    auto r = ImPlot::GetColormapSize(cmap);
    sendEmptyString();
    sendValueSignMagnitude<int>(r);
    flushSend();
  }
  }
  break;
case 0x00000824:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapColorU32")
    auto idx = receiveValueSignMagnitude<int>();
    auto cmap = receiveValueSignMagnitude<int>();
    uint32_t r;
    {
    auto r = ImPlot::GetColormapColorU32(idx, cmap);
    sendEmptyString();
    sendValue<uint32_t>(r);
    flushSend();
  }
  }
  break;
case 0x00000825:
  {
    FFFI_FUNCTION_INVOCATION("GetColormapColor")
    auto idx = receiveValueSignMagnitude<int>();
    auto cmap = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::GetColormapColor(idx, cmap);
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x00000826:
  {
    FFFI_FUNCTION_INVOCATION("SampleColormapU32")
    auto t = receiveValue<float>();
    auto cmap = receiveValueSignMagnitude<int>();
    uint32_t r;
    {
    auto r = ImPlot::SampleColormapU32(t, cmap);
    sendEmptyString();
    sendValue<uint32_t>(r);
    flushSend();
  }
  }
  break;
case 0x00000827:
  {
    FFFI_FUNCTION_INVOCATION("SampleColormap")
    auto t = receiveValue<float>();
    auto cmap = receiveValueSignMagnitude<int>();
    float* r;
    {
    auto r = ImPlot::SampleColormap(t, cmap);
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x00000828:
  {
    FFFI_FUNCTION_INVOCATION("ColormapScale")
    auto label = receiveString();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto size = receiveArray<float,2>();
    auto format = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    auto cmap = receiveValueSignMagnitude<int>();
    {
    ImPlot::ColormapScale(label, scale_min, scale_max, size, format, flags, cmap);
  }
  }
  break;
case 0x00000829:
  {
    FFFI_FUNCTION_INVOCATION("ColormapButton")
    auto label = receiveString();
    auto size_arg = receiveArray<float,2>();
    auto cmap = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::ColormapButton(label, size_arg, cmap);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x0000082a:
  {
    FFFI_FUNCTION_INVOCATION("ItemIcon")
    auto col = receiveArray<float,4>();
    {
    ImPlot::ItemIcon(col);
  }
  }
  break;
case 0x0000082b:
  {
    FFFI_FUNCTION_INVOCATION("ItemIconUint32")
    auto col = receiveValue<uint32_t>();
    {
    ImPlot::ItemIcon(col);
  }
  }
  break;
case 0x0000082c:
  {
    FFFI_FUNCTION_INVOCATION("ColormapIcon")
    auto cmap = receiveValueSignMagnitude<int>();
    {
    ImPlot::ColormapIcon(cmap);
  }
  }
  break;
case 0x0000082d:
  {
    FFFI_FUNCTION_INVOCATION("GetPlotDrawList")
    uintptr_t r;
    {
    auto r = ImPlot::GetPlotDrawList();
    sendEmptyString();
    sendValue(r);
    flushSend();
  }
  }
  break;
case 0x0000082e:
  {
    FFFI_FUNCTION_INVOCATION("PushPlotClipRect")
    auto expand = receiveValue<float>();
    {
    ImPlot::PushPlotClipRect(expand);
  }
  }
  break;
case 0x0000082f:
  {
    FFFI_FUNCTION_INVOCATION("PopPlotClipRect")
    {
    ImPlot::PopPlotClipRect();
  }
  }
  break;
case 0x00000830:
  {
    FFFI_FUNCTION_INVOCATION("ShowStyleSelector")
    auto label = receiveString();
    bool r;
    {
    auto r = ImPlot::ShowStyleSelector(label);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000831:
  {
    FFFI_FUNCTION_INVOCATION("ShowColormapSelector")
    auto label = receiveString();
    bool r;
    {
    auto r = ImPlot::ShowColormapSelector(label);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000832:
  {
    FFFI_FUNCTION_INVOCATION("ShowInputMapSelector")
    auto label = receiveString();
    bool r;
    {
    auto r = ImPlot::ShowInputMapSelector(label);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000833:
  {
    FFFI_FUNCTION_INVOCATION("ShowUserGuide")
    {
    ImPlot::ShowUserGuide();
  }
  }
  break;
case 0x00000834:
  {
    FFFI_FUNCTION_INVOCATION("PlotImage")
    auto label_id = receiveString();
    auto user_texture_id = receiveValue<uintptr_t>();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    {
    ImPlot::PlotImage(label_id, ImTextureID(user_texture_id), bounds_min, bounds_max);
  }
  }
  break;
case 0x00000835:
  {
    FFFI_FUNCTION_INVOCATION("PlotImageV")
    auto label_id = receiveString();
    auto user_texture_id = receiveValue<uintptr_t>();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto uv0 = receiveArray<float,2>();
    auto uv1 = receiveArray<float,2>();
    auto tint_col = receiveArray<float,4>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotImage(label_id, ImTextureID(user_texture_id), bounds_min, bounds_max, uv0, uv1, tint_col, flags);
  }
  }
  break;
case 0x00000836:
  {
    FFFI_FUNCTION_INVOCATION("PlotText")
    auto text = receiveString();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    {
    ImPlot::PlotText(text, x, y);
  }
  }
  break;
case 0x00000837:
  {
    FFFI_FUNCTION_INVOCATION("PlotTextV")
    auto text = receiveString();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto pix_offset = receiveArray<float,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotText(text, x, y, pix_offset, flags);
  }
  }
  break;
case 0x00000838:
  {
    FFFI_FUNCTION_INVOCATION("PlotDummy")
    auto label_id = receiveString();
    {
    ImPlot::PlotDummy(label_id);
  }
  }
  break;
case 0x00000839:
  {
    FFFI_FUNCTION_INVOCATION("PlotDummyV")
    auto label_id = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDummy(label_id, flags);
  }
  }
  break;
case 0x0000083a:
  {
    FFFI_FUNCTION_INVOCATION("SetNextLineStyle")
    {
    ImPlot::SetNextLineStyle();
  }
  }
  break;
case 0x0000083b:
  {
    FFFI_FUNCTION_INVOCATION("SetNextLineStyleV")
    auto col = receiveArray<float,4>();
    auto weight = receiveValue<float>();
    {
    ImPlot::SetNextLineStyle(col, weight);
  }
  }
  break;
case 0x0000083c:
  {
    FFFI_FUNCTION_INVOCATION("SetNextFillStyle")
    {
    ImPlot::SetNextFillStyle();
  }
  }
  break;
case 0x0000083d:
  {
    FFFI_FUNCTION_INVOCATION("SetNextFillStyleV")
    auto col = receiveArray<float,4>();
    auto alpha_mod = receiveValue<float>();
    {
    ImPlot::SetNextFillStyle(col, alpha_mod);
  }
  }
  break;
case 0x0000083e:
  {
    FFFI_FUNCTION_INVOCATION("SetNextMarkerStyle")
    {
    ImPlot::SetNextMarkerStyle();
  }
  }
  break;
case 0x0000083f:
  {
    FFFI_FUNCTION_INVOCATION("SetNextMarkerStyleV")
    auto marker = receiveValueSignMagnitude<int>();
    auto size = receiveValue<float>();
    auto fill = receiveArray<float,4>();
    auto weight = receiveValue<float>();
    auto outline = receiveArray<float,4>();
    {
    ImPlot::SetNextMarkerStyle(marker, size, fill, weight, outline);
  }
  }
  break;
case 0x00000840:
  {
    FFFI_FUNCTION_INVOCATION("SetNextErrorBarStyle")
    {
    ImPlot::SetNextErrorBarStyle();
  }
  }
  break;
case 0x00000841:
  {
    FFFI_FUNCTION_INVOCATION("SetNextErrorBarStyleV")
    auto col = receiveArray<float,4>();
    auto size = receiveValue<float>();
    auto weight = receiveValue<float>();
    {
    ImPlot::SetNextErrorBarStyle(col, size, weight);
  }
  }
  break;
case 0x00000842:
  {
    FFFI_FUNCTION_INVOCATION("GetLastItemColor")
    float* r;
    {
    auto r = ImPlot::GetLastItemColor();
    sendEmptyString();
    sendArray<float,4>(r);
    flushSend();
  }
  }
  break;
case 0x00000843:
  {
    FFFI_FUNCTION_INVOCATION("BustColorCache")
    {
    ImPlot::BustColorCache();
  }
  }
  break;
case 0x00000844:
  {
    FFFI_FUNCTION_INVOCATION("BustColorCacheV")
    auto plot_title_id = receiveString();
    {
    ImPlot::BustColorCache(plot_title_id);
  }
  }
  break;
case 0x00000845:
  {
    FFFI_FUNCTION_INVOCATION("ShowDemoWindow")
    {
    ImPlot::ShowDemoWindow();
  }
  }
  break;
case 0x00000846:
  {
    FFFI_FUNCTION_INVOCATION("BeginItem")
    auto label_id = receiveString();
    bool r;
    {
    auto r = ImPlot::BeginItem(label_id);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000847:
  {
    FFFI_FUNCTION_INVOCATION("BeginItemV")
    auto label_id = receiveString();
    auto flags = receiveValueSignMagnitude<int>();
    auto recolor_from = receiveValueSignMagnitude<int>();
    bool r;
    {
    auto r = ImPlot::BeginItem(label_id, flags, recolor_from);
    sendEmptyString();
    sendValue<bool>(r);
    flushSend();
  }
  }
  break;
case 0x00000848:
  {
    FFFI_FUNCTION_INVOCATION("EndItem")
    {
    ImPlot::EndItem();
  }
  }
  break;
case 0x00000849:
  {
    FFFI_FUNCTION_INVOCATION("BustItemCache")
    {
    ImPlot::BustItemCache();
  }
  }
  break;
case 0x0000084a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat32")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000084b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000084c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat64")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000084d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsFloat64V")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000084e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000084f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000850:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000851:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000852:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000853:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000854:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000855:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000856:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000857:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x00000858:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x00000859:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000085a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000085b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000085c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups);
;
  }
  }
  break;
case 0x0000085d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarGroupsUInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto groups = receiveValueSignMagnitude<int>();
    auto size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_labels;
auto ary_labels = convertNullSeparatedStringArrayToArray(label_ids,n_labels);
if(groups == 0) {
   groups = (int)(getSliceLength(values)/n_labels);
}
ImPlot::PlotBarGroups(ary_labels,values,(int)n_labels,groups,size,shift,flags);
;
  }
  }
  break;
case 0x0000085e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000085f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000860:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000861:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000862:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000863:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000864:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000865:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000866:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000867:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000868:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000869:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000086a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000086b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x0000086c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x0000086d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000086e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000086f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000870:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000871:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000872:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000873:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000874:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000875:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000876:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000877:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000878:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000879:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000087a:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000087b:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x0000087c:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x0000087d:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x0000087e:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000087f:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000880:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000881:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000882:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000883:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto bar_size = receiveValue<double>();
    auto shift = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,values,getSliceLength(values),bar_size,shift,flags,offset,stride);
  }
  }
  break;
case 0x00000884:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto bar_size = receiveValue<double>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size);
  }
  }
  break;
case 0x00000885:
  {
    FFFI_FUNCTION_INVOCATION("PlotBarsXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto bar_size = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotBars(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),bar_size,flags,offset,stride);
  }
  }
  break;
case 0x00000886:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000887:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000888:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000889:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000088a:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x0000088b:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000088c:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x0000088d:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000088e:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x0000088f:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000890:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000891:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000892:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000893:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000894:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000895:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000896:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000897:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000898:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,getSliceLength(xs));
  }
  }
  break;
case 0x00000899:
  {
    FFFI_FUNCTION_INVOCATION("PlotDigitalUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotDigital(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000089a:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto errs = receiveSlice<float>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000089b:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto errs = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x0000089c:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto neg = receiveSlice<float>();
    auto pos = receiveSlice<float>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x0000089d:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto neg = receiveSlice<float>();
    auto pos = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x0000089e:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto errs = receiveSlice<double>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000089f:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto errs = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008a0:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto neg = receiveSlice<double>();
    auto pos = receiveSlice<double>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008a1:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto neg = receiveSlice<double>();
    auto pos = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008a2:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto errs = receiveSlice<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008a3:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto errs = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008a4:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto neg = receiveSlice<int>();
    auto pos = receiveSlice<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008a5:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto neg = receiveSlice<int>();
    auto pos = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008a6:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto errs = receiveSlice<int16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008a7:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto errs = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008a8:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto neg = receiveSlice<int16_t>();
    auto pos = receiveSlice<int16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008a9:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto neg = receiveSlice<int16_t>();
    auto pos = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008aa:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto errs = receiveSlice<int32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008ab:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto errs = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008ac:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto neg = receiveSlice<int32_t>();
    auto pos = receiveSlice<int32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008ad:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto neg = receiveSlice<int32_t>();
    auto pos = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008ae:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto errs = receiveSlice<int8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008af:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto errs = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008b0:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto neg = receiveSlice<int8_t>();
    auto pos = receiveSlice<int8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008b1:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto neg = receiveSlice<int8_t>();
    auto pos = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008b2:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto errs = receiveSlice<unsigned>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008b3:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto errs = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008b4:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto neg = receiveSlice<unsigned>();
    auto pos = receiveSlice<unsigned>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008b5:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto neg = receiveSlice<unsigned>();
    auto pos = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008b6:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto errs = receiveSlice<uint16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008b7:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto errs = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008b8:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto neg = receiveSlice<uint16_t>();
    auto pos = receiveSlice<uint16_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008b9:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto neg = receiveSlice<uint16_t>();
    auto pos = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008ba:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto errs = receiveSlice<uint32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008bb:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto errs = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008bc:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto neg = receiveSlice<uint32_t>();
    auto pos = receiveSlice<uint32_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008bd:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto neg = receiveSlice<uint32_t>();
    auto pos = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008be:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto errs = receiveSlice<uint8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000008bf:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto errs = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,errs,std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(errs)),flags,offset,stride);
  }
  }
  break;
case 0x000008c0:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto neg = receiveSlice<uint8_t>();
    auto pos = receiveSlice<uint8_t>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)));
  }
  }
  break;
case 0x000008c1:
  {
    FFFI_FUNCTION_INVOCATION("PlotErrorBarsPosNegUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto neg = receiveSlice<uint8_t>();
    auto pos = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,std::min(std::min(std::min(getSliceLength(xs),getSliceLength(ys)),getSliceLength(neg)),getSliceLength(pos)),flags,offset,stride);
  }
  }
  break;
case 0x000008c2:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008c3:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008c4:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008c5:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008c6:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008c7:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008c8:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008c9:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008ca:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008cb:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008cc:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008cd:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008ce:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008cf:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008d0:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008d1:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008d2:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008d3:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008d4:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows);
  }
  }
  break;
case 0x000008d5:
  {
    FFFI_FUNCTION_INVOCATION("PlotHeatmapUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto rows = receiveValueSignMagnitude<int>();
    auto scale_min = receiveValue<double>();
    auto scale_max = receiveValue<double>();
    auto label_fmt = receiveString();
    auto bounds_min = receiveArray<double,2>();
    auto bounds_max = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotHeatmap(label_id,values,rows,((int)getSliceLength(values))/rows,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
  }
  }
  break;
case 0x000008d6:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008d7:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008d8:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008d9:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008da:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008db:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008dc:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008dd:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008de:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008df:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e0:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e1:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e2:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e3:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e4:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e5:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e6:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e7:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e8:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008e9:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogramUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto bins = receiveValueSignMagnitude<int>();
    auto bar_scale = receiveValue<double>();
    auto rangeP = receiveArray<double,2>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram(label_id,values,getSliceLength(values),bins,bar_scale,ImPlotRange(rangeP[0],rangeP[1]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008ea:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008eb:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008ec:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008ed:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008ee:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008ef:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f0:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f1:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f2:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f3:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f4:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f5:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f6:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f7:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f8:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008f9:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008fa:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008fb:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008fc:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,getSliceLength(xs));
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008fd:
  {
    FFFI_FUNCTION_INVOCATION("PlotHistogram2DUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto x_bins = receiveValueSignMagnitude<int>();
    auto y_bins = receiveValueSignMagnitude<int>();
    auto rangeP = receiveArray<double,4>();
    auto flags = receiveValueSignMagnitude<int>();
    double r;
    {
    r = ImPlot::PlotHistogram2D(label_id,xs,ys,(int)getSliceLength(xs),x_bins,y_bins,ImPlotRect(rangeP[0],rangeP[1],rangeP[2],rangeP[3]),flags);
    sendEmptyString();
    sendValue<double>(r);
    flushSend();
  }
  }
  break;
case 0x000008fe:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000008ff:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000900:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000901:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000902:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000903:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000904:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000905:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000906:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000907:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000908:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000909:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000090a:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000090b:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000090c:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000090d:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x0000090e:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000090f:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000910:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000911:
  {
    FFFI_FUNCTION_INVOCATION("PlotInfLinesUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotInfLines(label_id,values,getSliceLength(values),flags,offset,stride);
  }
  }
  break;
case 0x00000912:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000913:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000914:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000915:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000916:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000917:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000918:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000919:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000091a:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000091b:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000091c:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000091d:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000091e:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000091f:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000920:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000921:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000922:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000923:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000924:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000925:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000926:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000927:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000928:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000929:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000092a:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000092b:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000092c:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000092d:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000092e:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000092f:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000930:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000931:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000932:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000933:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000934:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000935:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x00000936:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000937:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000938:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000939:
  {
    FFFI_FUNCTION_INVOCATION("PlotLineXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotLine(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)),flags,offset,stride);
  }
  }
  break;
case 0x0000093a:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat32")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000093b:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<float>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000093c:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat64")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000093d:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartFloat64V")
    auto label_ids = receiveString();
    auto values = receiveSlice<double>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000093e:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000093f:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<int>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000940:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000941:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000942:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000943:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000944:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000945:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<int8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000946:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000947:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUIntV")
    auto label_ids = receiveString();
    auto values = receiveSlice<unsigned>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x00000948:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt16")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x00000949:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt16V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000094a:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt32")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000094b:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt32V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000094c:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt8")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius);
;
  }
  }
  break;
case 0x0000094d:
  {
    FFFI_FUNCTION_INVOCATION("PlotPieChartUInt8V")
    auto label_ids = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto x = receiveValue<double>();
    auto y = receiveValue<double>();
    auto radius = receiveValue<double>();
    auto label_fmt = receiveString();
    auto angle0 = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    {
    
size_t n_label_ids;
auto ary_label_ids = convertNullSeparatedStringArrayToArray(label_ids,n_label_ids);
assert(n_label_ids == getSliceLength(values));
ImPlot::PlotPieChart(ary_label_ids,values,(int)std::min(n_label_ids,getSliceLength(values)),x,y,radius,label_fmt,angle0,flags);
;
  }
  }
  break;
case 0x0000094e:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000094f:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000950:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000951:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000952:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000953:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000954:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000955:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000956:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000957:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000958:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000959:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000095a:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000095b:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000095c:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000095d:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000095e:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000095f:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000960:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000961:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000962:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000963:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000964:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000965:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000966:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000967:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000968:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000969:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000096a:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000096b:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000096c:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000096d:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x0000096e:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x0000096f:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000970:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000971:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000972:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x00000973:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000974:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000975:
  {
    FFFI_FUNCTION_INVOCATION("PlotScatterXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotScatter(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x00000976:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000977:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000978:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000979:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x0000097a:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto y1s = receiveSlice<float>();
    auto y2s = receiveSlice<float>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x0000097b:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto y1s = receiveSlice<float>();
    auto y2s = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x0000097c:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000097d:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000097e:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000097f:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x00000980:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto y1s = receiveSlice<double>();
    auto y2s = receiveSlice<double>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x00000981:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Float64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto y1s = receiveSlice<double>();
    auto y2s = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x00000982:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000983:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000984:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000985:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x00000986:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto y1s = receiveSlice<int>();
    auto y2s = receiveSlice<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x00000987:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2IntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto y1s = receiveSlice<int>();
    auto y2s = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x00000988:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000989:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000098a:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000098b:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x0000098c:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto y1s = receiveSlice<int16_t>();
    auto y2s = receiveSlice<int16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x0000098d:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto y1s = receiveSlice<int16_t>();
    auto y2s = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x0000098e:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000098f:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000990:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000991:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x00000992:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto y1s = receiveSlice<int32_t>();
    auto y2s = receiveSlice<int32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x00000993:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto y1s = receiveSlice<int32_t>();
    auto y2s = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x00000994:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x00000995:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x00000996:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000997:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x00000998:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto y1s = receiveSlice<int8_t>();
    auto y2s = receiveSlice<int8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x00000999:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2Int8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto y1s = receiveSlice<int8_t>();
    auto y2s = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x0000099a:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x0000099b:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x0000099c:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x0000099d:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x0000099e:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto y1s = receiveSlice<unsigned>();
    auto y2s = receiveSlice<unsigned>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x0000099f:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto y1s = receiveSlice<unsigned>();
    auto y2s = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000009a0:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009a1:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009a2:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009a3:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000009a4:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto y1s = receiveSlice<uint16_t>();
    auto y2s = receiveSlice<uint16_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000009a5:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto y1s = receiveSlice<uint16_t>();
    auto y2s = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000009a6:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009a7:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009a8:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009a9:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000009aa:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto y1s = receiveSlice<uint32_t>();
    auto y2s = receiveSlice<uint32_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000009ab:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto y1s = receiveSlice<uint32_t>();
    auto y2s = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000009ac:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009ad:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto yref = receiveValue<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,values,(int)getSliceLength(values),yref,xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009ae:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009af:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto yref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),yref,flags,offset,stride);
  }
  }
  break;
case 0x000009b0:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto y1s = receiveSlice<uint8_t>();
    auto y2s = receiveSlice<uint8_t>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)));
  }
  }
  break;
case 0x000009b1:
  {
    FFFI_FUNCTION_INVOCATION("PlotShadedXY1Y2UInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto y1s = receiveSlice<uint8_t>();
    auto y2s = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotShaded(label_id,xs,y1s,y2s,(int)std::min(std::min(getSliceLength(xs),getSliceLength(y1s)),getSliceLength(y2s)),flags,offset,stride);
  }
  }
  break;
case 0x000009b2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009b3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009b4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009b5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009b6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009b7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009b8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009b9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009ba:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009bb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009bc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009bd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009be:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009bf:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009c0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009c1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009c2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009c3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009c4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009c5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009c6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009c7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009c8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009c9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009ca:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009cb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009cc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009cd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009ce:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009cf:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009d0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009d1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009d2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009d3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009d4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009d5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009d6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values));
  }
  }
  break;
case 0x000009d7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto xscale = receiveValue<double>();
    auto xstart = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,values,getSliceLength(values),xscale,xstart,flags,offset,stride);
  }
  }
  break;
case 0x000009d8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009d9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStairsXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStairs(label_id,xs,ys,getSliceLength(xs),flags,offset,stride);
  }
  }
  break;
case 0x000009da:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat32")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009db:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat32V")
    auto label_id = receiveString();
    auto values = receiveSlice<float>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009dc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat32")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009dd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<float>();
    auto ys = receiveSlice<float>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009de:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat64")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009df:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsFloat64V")
    auto label_id = receiveString();
    auto values = receiveSlice<double>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009e0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat64")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009e1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYFloat64V")
    auto label_id = receiveString();
    auto xs = receiveSlice<double>();
    auto ys = receiveSlice<double>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009e2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009e3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<int>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009e4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009e5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<int>();
    auto ys = receiveSlice<int>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009e6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009e7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<int16_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009e8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009e9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int16_t>();
    auto ys = receiveSlice<int16_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009ea:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009eb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<int32_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009ec:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009ed:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int32_t>();
    auto ys = receiveSlice<int32_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009ee:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009ef:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<int8_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009f0:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009f1:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<int8_t>();
    auto ys = receiveSlice<int8_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009f2:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009f3:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUIntV")
    auto label_id = receiveString();
    auto values = receiveSlice<unsigned>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009f4:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009f5:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUIntV")
    auto label_id = receiveString();
    auto xs = receiveSlice<unsigned>();
    auto ys = receiveSlice<unsigned>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009f6:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt16")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009f7:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt16V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint16_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009f8:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt16")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009f9:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt16V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint16_t>();
    auto ys = receiveSlice<uint16_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009fa:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt32")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009fb:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt32V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint32_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x000009fc:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt32")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x000009fd:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt32V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint32_t>();
    auto ys = receiveSlice<uint32_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x000009fe:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt8")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values));
  }
  }
  break;
case 0x000009ff:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsUInt8V")
    auto label_id = receiveString();
    auto values = receiveSlice<uint8_t>();
    auto ref = receiveValue<double>();
    auto scale = receiveValue<double>();
    auto start = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,values,(int)getSliceLength(values),ref,scale,start,flags,offset,stride);
  }
  }
  break;
case 0x00000a00:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt8")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)));
  }
  }
  break;
case 0x00000a01:
  {
    FFFI_FUNCTION_INVOCATION("PlotStemsXYUInt8V")
    auto label_id = receiveString();
    auto xs = receiveSlice<uint8_t>();
    auto ys = receiveSlice<uint8_t>();
    auto ref = receiveValue<double>();
    auto flags = receiveValueSignMagnitude<int>();
    auto offset = receiveValueSignMagnitude<int>();
    auto stride = receiveValueSignMagnitude<int>();
    {
    ImPlot::PlotStems(label_id,xs,ys,(int)std::min(getSliceLength(xs),getSliceLength(ys)),ref,flags,offset,stride);
  }
  }
  break;
case 0x00000a02:
  {
    FFFI_FUNCTION_INVOCATION("loadStyle")
    auto ptr = receiveValue<uintptr_t>();
    auto bs = receiveSlice<bool>();
    auto fs = receiveSlice<float>();
    auto vec2s = receiveSlice<float>();
    auto cols = receiveSlice<float>();
    auto markers = receiveSlice<int>();
    auto maps = receiveSlice<int>();
    {
    
    auto s = (ImPlotStyle*)ptr;
	int i;
	
#define ASSIGN(l,r) ((l) = (r))
	i = 0;
    ASSIGN(s->UseLocalTime, bs[i++]);
    ASSIGN(s->UseISO8601, bs[i++]);
    ASSIGN(s->Use24HourClock, bs[i++]);

	i = 0;
	ASSIGN(s->LineWeight, fs[i++]);
	ASSIGN(s->MarkerSize, fs[i++]);
	ASSIGN(s->MarkerWeight, fs[i++]);
	ASSIGN(s->FillAlpha, fs[i++]);
	ASSIGN(s->ErrorBarSize, fs[i++]);
	ASSIGN(s->ErrorBarWeight, fs[i++]);
	ASSIGN(s->DigitalBitHeight, fs[i++]);
	ASSIGN(s->DigitalBitGap, fs[i++]);
	ASSIGN(s->PlotBorderSize, fs[i++]);
	ASSIGN(s->MinorAlpha, fs[i++]);
	
	i = 0;
	ASSIGN(s->MajorTickLen.x, vec2s[i++]);
	ASSIGN(s->MajorTickLen.y, vec2s[i++]);
	ASSIGN(s->MinorTickLen.x, vec2s[i++]);
	ASSIGN(s->MinorTickLen.y, vec2s[i++]);
	ASSIGN(s->MajorTickSize.x, vec2s[i++]);
	ASSIGN(s->MajorTickSize.y, vec2s[i++]);
	ASSIGN(s->MinorTickSize.x, vec2s[i++]);
	ASSIGN(s->MinorTickSize.y, vec2s[i++]);
	ASSIGN(s->MajorGridSize.x, vec2s[i++]);
	ASSIGN(s->MajorGridSize.y, vec2s[i++]);
	ASSIGN(s->MinorGridSize.x, vec2s[i++]);
	ASSIGN(s->MinorGridSize.y, vec2s[i++]);
	ASSIGN(s->PlotPadding.x, vec2s[i++]);
	ASSIGN(s->PlotPadding.y, vec2s[i++]);
	ASSIGN(s->LabelPadding.x, vec2s[i++]);
	ASSIGN(s->LabelPadding.y, vec2s[i++]);
	ASSIGN(s->LegendPadding.x, vec2s[i++]);
	ASSIGN(s->LegendPadding.y, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.x, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.y, vec2s[i++]);
	ASSIGN(s->LegendSpacing.x, vec2s[i++]);
	ASSIGN(s->LegendSpacing.y, vec2s[i++]);
	ASSIGN(s->MousePosPadding.x, vec2s[i++]);
	ASSIGN(s->MousePosPadding.y, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.x, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.y, vec2s[i++]);
	ASSIGN(s->FitPadding.x, vec2s[i++]);
	ASSIGN(s->FitPadding.y, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.x, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.y, vec2s[i++]);
	ASSIGN(s->PlotMinSize.x, vec2s[i++]);
	ASSIGN(s->PlotMinSize.y, vec2s[i++]);

	i = 0;
    for(i = 0;i<ImPlotCol_COUNT;i++) {
		 ASSIGN(s->Colors[i].x, cols[i*4+0]);
		 ASSIGN(s->Colors[i].y, cols[i*4+1]);
		 ASSIGN(s->Colors[i].z, cols[i*4+2]);
		 ASSIGN(s->Colors[i].w, cols[i*4+3]);
	}

	i = 0;
    ASSIGN(s->Colormap, maps[i++]);
#undef ASSIGN
;
  }
  }
  break;
case 0x00000a03:
  {
    FFFI_FUNCTION_INVOCATION("GetStyle")
    uintptr_t r;
    {
    r = (uintptr_t)&ImPlot::GetStyle();
    sendEmptyString();
    sendValue(r);
    flushSend();
  }
  }
  break;
case 0x00000a04:
  {
    FFFI_FUNCTION_INVOCATION("dumpStyle")
    auto ptr = receiveValue<uintptr_t>();
    bool* bs;
    float* fs;
    float* vec2s;
    float* cols;
    int* markers;
    int* maps;
    {
    
	auto s = (ImPlotStyle*)ptr;
	size_t bs_len = 3;
    bs = (decltype(bs))arenaCalloc(bs_len,sizeof(*bs));
	size_t fs_len = 10;
    fs = (decltype(fs))arenaCalloc(fs_len,sizeof(*fs));
	size_t vec2s_len = 16*2;
    vec2s = (decltype(vec2s))arenaCalloc(vec2s_len,sizeof(*vec2s));
	size_t cols_len = 4*ImPlotCol_COUNT;
    cols = (decltype(cols))arenaCalloc(cols_len,sizeof(*cols));
	size_t markers_len = 2;
    markers = (decltype(markers))arenaCalloc(markers_len,sizeof(*markers));
	size_t maps_len = 1;
    maps = (decltype(maps))arenaCalloc(maps_len,sizeof(*maps));

	int i;
	
#define ASSIGN(l,r) ((r) = (l))
	i = 0;
    ASSIGN(s->UseLocalTime, bs[i++]);
    ASSIGN(s->UseISO8601, bs[i++]);
    ASSIGN(s->Use24HourClock, bs[i++]);

	i = 0;
	ASSIGN(s->LineWeight, fs[i++]);
	ASSIGN(s->MarkerSize, fs[i++]);
	ASSIGN(s->MarkerWeight, fs[i++]);
	ASSIGN(s->FillAlpha, fs[i++]);
	ASSIGN(s->ErrorBarSize, fs[i++]);
	ASSIGN(s->ErrorBarWeight, fs[i++]);
	ASSIGN(s->DigitalBitHeight, fs[i++]);
	ASSIGN(s->DigitalBitGap, fs[i++]);
	ASSIGN(s->PlotBorderSize, fs[i++]);
	ASSIGN(s->MinorAlpha, fs[i++]);
	
	i = 0;
	ASSIGN(s->MajorTickLen.x, vec2s[i++]);
	ASSIGN(s->MajorTickLen.y, vec2s[i++]);
	ASSIGN(s->MinorTickLen.x, vec2s[i++]);
	ASSIGN(s->MinorTickLen.y, vec2s[i++]);
	ASSIGN(s->MajorTickSize.x, vec2s[i++]);
	ASSIGN(s->MajorTickSize.y, vec2s[i++]);
	ASSIGN(s->MinorTickSize.x, vec2s[i++]);
	ASSIGN(s->MinorTickSize.y, vec2s[i++]);
	ASSIGN(s->MajorGridSize.x, vec2s[i++]);
	ASSIGN(s->MajorGridSize.y, vec2s[i++]);
	ASSIGN(s->MinorGridSize.x, vec2s[i++]);
	ASSIGN(s->MinorGridSize.y, vec2s[i++]);
	ASSIGN(s->PlotPadding.x, vec2s[i++]);
	ASSIGN(s->PlotPadding.y, vec2s[i++]);
	ASSIGN(s->LabelPadding.x, vec2s[i++]);
	ASSIGN(s->LabelPadding.y, vec2s[i++]);
	ASSIGN(s->LegendPadding.x, vec2s[i++]);
	ASSIGN(s->LegendPadding.y, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.x, vec2s[i++]);
	ASSIGN(s->LegendInnerPadding.y, vec2s[i++]);
	ASSIGN(s->LegendSpacing.x, vec2s[i++]);
	ASSIGN(s->LegendSpacing.y, vec2s[i++]);
	ASSIGN(s->MousePosPadding.x, vec2s[i++]);
	ASSIGN(s->MousePosPadding.y, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.x, vec2s[i++]);
	ASSIGN(s->AnnotationPadding.y, vec2s[i++]);
	ASSIGN(s->FitPadding.x, vec2s[i++]);
	ASSIGN(s->FitPadding.y, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.x, vec2s[i++]);
	ASSIGN(s->PlotDefaultSize.y, vec2s[i++]);
	ASSIGN(s->PlotMinSize.x, vec2s[i++]);
	ASSIGN(s->PlotMinSize.y, vec2s[i++]);

	i = 0;
    for(i = 0;i<ImPlotCol_COUNT;i++) {
		 ASSIGN(s->Colors[i].x, cols[i*4+0]);
		 ASSIGN(s->Colors[i].y, cols[i*4+1]);
		 ASSIGN(s->Colors[i].z, cols[i*4+2]);
		 ASSIGN(s->Colors[i].w, cols[i*4+3]);
	}

	i = 0;
    ASSIGN(s->Colormap, maps[i++]);
#undef ASSIGN
;
    sendEmptyString();
    sendSlice<bool>(bs,bs_len);
    sendSlice<float>(fs,fs_len);
    sendSlice<float>(vec2s,vec2s_len);
    sendSlice<float>(cols,cols_len);
    sendSlice<int>(markers,markers_len);
    sendSlice<int>(maps,maps_len);
    flushSend();
  }
  }
  break;
