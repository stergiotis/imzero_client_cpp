// Code generated by fffi generator; DO NOT EDIT.
case 0x00000bb8:
  {
    FFFI_FUNCTION_INVOCATION("NewImColorEditorForeignPtr")
    uintptr_t ptr;
    {
    ptr = (uintptr_t)(new TextEditor());
    sendEmptyString();
    sendValue(ptr);
    flushSend();
  }
  }
  break;
case 0x00000bb9:
  {
    FFFI_FUNCTION_INVOCATION("Destroy")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    delete ((TextEditor*) foreignptr);
  }
  }
  break;
case 0x00000bba:
  {
    FFFI_FUNCTION_INVOCATION("Render")
    auto foreignptr = receiveValue<uintptr_t>();
    auto title = receiveString();
    {
    ((TextEditor*)foreignptr)->Render(title);
  }
  }
  break;
case 0x00000bbb:
  {
    FFFI_FUNCTION_INVOCATION("RenderV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto title = receiveString();
    auto parentIsFocused = receiveValue<bool>();
    auto aSize = receiveArray<float,2>();
    auto aBorder = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->Render(title, parentIsFocused, aSize, aBorder);
  }
  }
  break;
case 0x00000bbc:
  {
    FFFI_FUNCTION_INVOCATION("SetText")
    auto foreignptr = receiveValue<uintptr_t>();
    auto text = receiveString();
    {
    ((TextEditor*)foreignptr)->SetText(text);
  }
  }
  break;
case 0x00000bbd:
  {
    FFFI_FUNCTION_INVOCATION("GetText")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * text;
    {
    auto const text = ((TextEditor*)foreignptr)->GetText();
    sendEmptyString();
    sendString(text);
    flushSend();
  }
  }
  break;
case 0x00000bbe:
  {
    FFFI_FUNCTION_INVOCATION("GetSelectedText")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * text;
    {
    auto const text = ((TextEditor*)foreignptr)->GetSelectedText();
    sendEmptyString();
    sendString(text);
    flushSend();
  }
  }
  break;
case 0x00000bbf:
  {
    FFFI_FUNCTION_INVOCATION("GetCurrentLineText")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * text;
    {
    auto const text = ((TextEditor*)foreignptr)->GetCurrentLineText();
    sendEmptyString();
    sendString(text);
    flushSend();
  }
  }
  break;
case 0x00000bc0:
  {
    FFFI_FUNCTION_INVOCATION("GetTotalLines")
    auto foreignptr = receiveValue<uintptr_t>();
    int lines;
    {
    lines = ((TextEditor*)foreignptr)->GetTotalLines();
    sendEmptyString();
    sendValueSignMagnitude<int>(lines);
    flushSend();
  }
  }
  break;
case 0x00000bc1:
  {
    FFFI_FUNCTION_INVOCATION("IsOverwrite")
    auto foreignptr = receiveValue<uintptr_t>();
    bool overwrite;
    {
    overwrite = ((TextEditor*)foreignptr)->IsOverwrite();
    sendEmptyString();
    sendValue<bool>(overwrite);
    flushSend();
  }
  }
  break;
case 0x00000bc2:
  {
    FFFI_FUNCTION_INVOCATION("SetReadOnly")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetReadOnly(v);
  }
  }
  break;
case 0x00000bc3:
  {
    FFFI_FUNCTION_INVOCATION("IsReadOnly")
    auto foreignptr = receiveValue<uintptr_t>();
    bool readonly;
    {
    readonly = ((TextEditor*)foreignptr)->IsReadOnly();
    sendEmptyString();
    sendValue<bool>(readonly);
    flushSend();
  }
  }
  break;
case 0x00000bc4:
  {
    FFFI_FUNCTION_INVOCATION("IsChanged")
    auto foreignptr = receiveValue<uintptr_t>();
    bool textChanged;
    {
    auto p = ((TextEditor*)foreignptr);
textChanged = p->IsTextChanged();;
    sendEmptyString();
    sendValue<bool>(textChanged);
    flushSend();
  }
  }
  break;
case 0x00000bc5:
  {
    FFFI_FUNCTION_INVOCATION("GetCursorPosition")
    auto foreignptr = receiveValue<uintptr_t>();
    int line;
    int column;
    {
    auto p = ((TextEditor*)foreignptr);
auto c = p->GetCursorPosition();
line = c.mLine;
column = c.mColumn;
;
    sendEmptyString();
    sendValueSignMagnitude<int>(line);
    sendValueSignMagnitude<int>(column);
    flushSend();
  }
  }
  break;
case 0x00000bc6:
  {
    FFFI_FUNCTION_INVOCATION("IsColorizerEnabled")
    auto foreignptr = receiveValue<uintptr_t>();
    bool enabled;
    {
    enabled = ((TextEditor*)foreignptr)->IsColorizerEnabled();
    sendEmptyString();
    sendValue<bool>(enabled);
    flushSend();
  }
  }
  break;
case 0x00000bc7:
  {
    FFFI_FUNCTION_INVOCATION("SetColorizerEnable")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetColorizerEnable(v);
  }
  }
  break;
case 0x00000bc8:
  {
    FFFI_FUNCTION_INVOCATION("SetHandleMouseInputs")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetHandleMouseInputs(v);
  }
  }
  break;
case 0x00000bc9:
  {
    FFFI_FUNCTION_INVOCATION("IsHandleMouseInputsEnabled")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsHandleMouseInputsEnabled();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x00000bca:
  {
    FFFI_FUNCTION_INVOCATION("SetHandleKeyboardInputs")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetHandleKeyboardInputs(v);
  }
  }
  break;
case 0x00000bcb:
  {
    FFFI_FUNCTION_INVOCATION("IsHandleKeyboardInputsEnabled")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsHandleKeyboardInputsEnabled();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x00000bcc:
  {
    FFFI_FUNCTION_INVOCATION("SetImGuiChildIgnored")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetImGuiChildIgnored(v);
  }
  }
  break;
case 0x00000bcd:
  {
    FFFI_FUNCTION_INVOCATION("IsImGuiChildIgnored")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsImGuiChildIgnored();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x00000bce:
  {
    FFFI_FUNCTION_INVOCATION("SetShowWhitespaces")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->SetShowWhitespaces(v);
  }
  }
  break;
case 0x00000bcf:
  {
    FFFI_FUNCTION_INVOCATION("IsShowingWhitespaces")
    auto foreignptr = receiveValue<uintptr_t>();
    bool v;
    {
    v = ((TextEditor*)foreignptr)->IsShowingWhitespaces();
    sendEmptyString();
    sendValue<bool>(v);
    flushSend();
  }
  }
  break;
case 0x00000bd0:
  {
    FFFI_FUNCTION_INVOCATION("SetTabSize")
    auto foreignptr = receiveValue<uintptr_t>();
    auto v = receiveValueSignMagnitude<int>();
    {
    ((TextEditor*)foreignptr)->SetTabSize(v);
  }
  }
  break;
case 0x00000bd1:
  {
    FFFI_FUNCTION_INVOCATION("GetTabSize")
    auto foreignptr = receiveValue<uintptr_t>();
    int v;
    {
    v = ((TextEditor*)foreignptr)->GetTabSize();
    sendEmptyString();
    sendValueSignMagnitude<int>(v);
    flushSend();
  }
  }
  break;
case 0x00000bd2:
  {
    FFFI_FUNCTION_INVOCATION("InsertText")
    auto foreignptr = receiveValue<uintptr_t>();
    auto text = receiveString();
    {
    ((TextEditor*)foreignptr)->InsertText(text);
  }
  }
  break;
case 0x00000bd3:
  {
    FFFI_FUNCTION_INVOCATION("MoveUp")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveUp();
  }
  }
  break;
case 0x00000bd4:
  {
    FFFI_FUNCTION_INVOCATION("MoveUpV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveUp(amount,selectP);
  }
  }
  break;
case 0x00000bd5:
  {
    FFFI_FUNCTION_INVOCATION("MoveDown")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveDown();
  }
  }
  break;
case 0x00000bd6:
  {
    FFFI_FUNCTION_INVOCATION("MoveDownV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveDown(amount,selectP);
  }
  }
  break;
case 0x00000bd7:
  {
    FFFI_FUNCTION_INVOCATION("MoveLeft")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveLeft();
  }
  }
  break;
case 0x00000bd8:
  {
    FFFI_FUNCTION_INVOCATION("MoveLeftV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    auto wordMode = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveLeft(amount,selectP,wordMode);
  }
  }
  break;
case 0x00000bd9:
  {
    FFFI_FUNCTION_INVOCATION("MoveRight")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveRight();
  }
  }
  break;
case 0x00000bda:
  {
    FFFI_FUNCTION_INVOCATION("MoveRightV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto amount = receiveValueSignMagnitude<int>();
    auto selectP = receiveValue<bool>();
    auto wordMode = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveRight(amount,selectP,wordMode);
  }
  }
  break;
case 0x00000bdb:
  {
    FFFI_FUNCTION_INVOCATION("MoveTop")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveTop();
  }
  }
  break;
case 0x00000bdc:
  {
    FFFI_FUNCTION_INVOCATION("MoveTopV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveTop(selectP);
  }
  }
  break;
case 0x00000bdd:
  {
    FFFI_FUNCTION_INVOCATION("MoveBottom")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveBottom();
  }
  }
  break;
case 0x00000bde:
  {
    FFFI_FUNCTION_INVOCATION("MoveBottomV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveBottom(selectP);
  }
  }
  break;
case 0x00000bdf:
  {
    FFFI_FUNCTION_INVOCATION("MoveHome")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveHome();
  }
  }
  break;
case 0x00000be0:
  {
    FFFI_FUNCTION_INVOCATION("MoveHomeV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveHome(selectP);
  }
  }
  break;
case 0x00000be1:
  {
    FFFI_FUNCTION_INVOCATION("MoveEnd")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->MoveEnd();
  }
  }
  break;
case 0x00000be2:
  {
    FFFI_FUNCTION_INVOCATION("MoveEndV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto selectP = receiveValue<bool>();
    {
    ((TextEditor*)foreignptr)->MoveEnd(selectP);
  }
  }
  break;
case 0x00000be3:
  {
    FFFI_FUNCTION_INVOCATION("SelectWordUnderCursor")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->SelectWordUnderCursor();
  }
  }
  break;
case 0x00000be4:
  {
    FFFI_FUNCTION_INVOCATION("SelectAll")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->SelectAll();
  }
  }
  break;
case 0x00000be5:
  {
    FFFI_FUNCTION_INVOCATION("HasSelection")
    auto foreignptr = receiveValue<uintptr_t>();
    bool has;
    {
    has = ((TextEditor*)foreignptr)->HasSelection();
    sendEmptyString();
    sendValue<bool>(has);
    flushSend();
  }
  }
  break;
case 0x00000be6:
  {
    FFFI_FUNCTION_INVOCATION("Copy")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Copy();
  }
  }
  break;
case 0x00000be7:
  {
    FFFI_FUNCTION_INVOCATION("Cut")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Cut();
  }
  }
  break;
case 0x00000be8:
  {
    FFFI_FUNCTION_INVOCATION("Paste")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Paste();
  }
  }
  break;
case 0x00000be9:
  {
    FFFI_FUNCTION_INVOCATION("Delete")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Delete();
  }
  }
  break;
case 0x00000bea:
  {
    FFFI_FUNCTION_INVOCATION("CanUndo")
    auto foreignptr = receiveValue<uintptr_t>();
    bool can;
    {
    can = ((TextEditor*)foreignptr)->CanUndo();
    sendEmptyString();
    sendValue<bool>(can);
    flushSend();
  }
  }
  break;
case 0x00000beb:
  {
    FFFI_FUNCTION_INVOCATION("CanRedo")
    auto foreignptr = receiveValue<uintptr_t>();
    bool can;
    {
    can = ((TextEditor*)foreignptr)->CanRedo();
    sendEmptyString();
    sendValue<bool>(can);
    flushSend();
  }
  }
  break;
case 0x00000bec:
  {
    FFFI_FUNCTION_INVOCATION("Undo")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Undo();
  }
  }
  break;
case 0x00000bed:
  {
    FFFI_FUNCTION_INVOCATION("UndoV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto steps = receiveValueSignMagnitude<int>();
    {
    ((TextEditor*)foreignptr)->Undo(steps);
  }
  }
  break;
case 0x00000bee:
  {
    FFFI_FUNCTION_INVOCATION("Redo")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    ((TextEditor*)foreignptr)->Redo();
  }
  }
  break;
case 0x00000bef:
  {
    FFFI_FUNCTION_INVOCATION("RedoV")
    auto foreignptr = receiveValue<uintptr_t>();
    auto steps = receiveValueSignMagnitude<int>();
    {
    ((TextEditor*)foreignptr)->Redo(steps);
  }
  }
  break;
case 0x00000bf0:
  {
    FFFI_FUNCTION_INVOCATION("GetLanguageDefinitionName")
    auto foreignptr = receiveValue<uintptr_t>();
    const char * name;
    {
    name = ((TextEditor*)foreignptr)->GetLanguageDefinitionName();;
    sendEmptyString();
    sendString(name);
    flushSend();
  }
  }
  break;
case 0x00000bf1:
  {
    FFFI_FUNCTION_INVOCATION("ActivatePaletteMariana")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetPalette(u->GetMarianaPalette());;
  }
  }
  break;
case 0x00000bf2:
  {
    FFFI_FUNCTION_INVOCATION("ActivatePaletteDark")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetPalette(u->GetDarkPalette());;
  }
  }
  break;
case 0x00000bf3:
  {
    FFFI_FUNCTION_INVOCATION("ActivatePaletteLight")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetPalette(u->GetLightPalette());;
  }
  }
  break;
case 0x00000bf4:
  {
    FFFI_FUNCTION_INVOCATION("ActivatePaletteRetroBlue")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetPalette(u->GetRetroBluePalette());;
  }
  }
  break;
case 0x00000bf5:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageCPlusPlus")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::CPlusPlus());
;
  }
  }
  break;
case 0x00000bf6:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageHLSL")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::HLSL());
;
  }
  }
  break;
case 0x00000bf7:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageGLSL")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::GLSL());
;
  }
  }
  break;
case 0x00000bf8:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguagePython")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::Python());
;
  }
  }
  break;
case 0x00000bf9:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageC")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::C());
;
  }
  }
  break;
case 0x00000bfa:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageSQL")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::SQL());
;
  }
  }
  break;
case 0x00000bfb:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageAngelScript")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::AngelScript());
;
  }
  }
  break;
case 0x00000bfc:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageLua")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::Lua());
;
  }
  }
  break;
case 0x00000bfd:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageCSharp")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::CSharp());
;
  }
  }
  break;
case 0x00000bfe:
  {
    FFFI_FUNCTION_INVOCATION("ActivateLanguageJson")
    auto foreignptr = receiveValue<uintptr_t>();
    {
    auto const u = ((TextEditor*)foreignptr);
u->SetLanguageDefinition(TextEditor::LanguageDefinition::Json());
;
  }
  }
  break;
