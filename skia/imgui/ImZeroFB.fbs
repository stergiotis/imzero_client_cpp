namespace ImZeroFB;

struct SingleVec2 {
    x: float;
    y: float;
}
struct SingleVec4 {
    x: float;
    y: float;
    z: float;
    w: float;
}
table ArrayOfVec2 {
    xs: [float];
    ys: [float];
}
table ArrayOfVec4 {
    xs: [float];
    ys: [float];
    zs: [float];
    ws: [float];
}
table CmdRegisterFont {
    name: string;
    url: string;
    subpixel: bool;
}
table CmdPolyline {
    points: ArrayOfVec2;
    col: uint32;
    flags: uint32; // ImDrawFlags
    thickness: float;
}
table CmdConvexPolyFilled {
    points: ArrayOfVec2;
    col: uint32;
}
table CmdConcavePolyFilled {
    points: ArrayOfVec2;
    col: uint32;
}
table CmdLine {
    p1: SingleVec2;
    p2: SingleVec2;
    col: uint32;
    thickness: float;
}
table CmdRectRounded {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding: float;
    thickness: float;
}
table CmdRectRoundedCorners {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding_top_left: float;
    rounding_top_right: float;
    rounding_bottom_right: float;
    rounding_bottom_left: float;
    thickness: float;
}
table CmdRectRoundedFilled {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding: float;
}
table CmdRectRoundedCornersFilled {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding_top_left: float;
    rounding_top_right: float;
    rounding_bottom_right: float;
    rounding_bottom_left: float;
}
table CmdQuad {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    col: uint32;
    thickness: float;
}
table CmdQuadFilled {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    col: uint32;
}
table CmdTriangle {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    col: uint32;
    thickness: float;
}
table CmdTriangleFilled {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    col: uint32;
}
table CmdCircle {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
    thickness: float;
}
table CmdCircleFilled {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
}
table CmdNgon {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
    thickness: float;
}
table CmdNgonFilled {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
}
table CmdEllipse {
    center: SingleVec2;
    radius: SingleVec2;
    col: uint32;
    rot: float;
    num_segments: int;
    thickness: float;
}
table CmdEllipseFilled {
    center: SingleVec2;
    radius: SingleVec2;
    col: uint32;
    rot: float;
    num_segments: int;
}
table CmdBezierCubic {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    col: uint32;
    thickness: float;
    num_segments: int;
}
table CmdBezierQuadratic {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    col: uint32;
    thickness: float;
    num_segments: int;
}
table CmdImage {
    user_texture_id: uint64; // ImTextureID
    p_min: SingleVec2;
    p_max: SingleVec2;
    uv_min: SingleVec2;
    uv_max: SingleVec2;
    col: uint32;
}
table CmdImageQuad {
    user_texture_id: uint64; // ImTextureID
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    uv1: SingleVec2;
    uv2: SingleVec2;
    uv3: SingleVec2;
    uv4: SingleVec2;
    col: uint32;
}
table CmdImageRounded {
    user_texture_id: uint64; // ImTextureID
    p_min: SingleVec2;
    p_max: SingleVec2;
    uv_min: SingleVec2;
    uv_max: SingleVec2;
    col: uint32;
    rounding: float;
    flags: uint32; // ImDrawFlags
}
table CmdPushClipRect {
    rect: SingleVec4;
    intersected_with_current_clip_rect : bool;
}
table CmdPopClipRect {
}
table CmdRenderText {
    imfont: uint64; // FIXME
    size: float;
    pos: SingleVec2;
    col: uint32;
    clip_rect: SingleVec4;
    text: string;
}
enum IsParagraphText:uint8 {
    Never = 0,
    Always = 1,
    Auto = 2,
}
enum TextAlignFlags:uint8 {
    Left = 0,
    Right = 1,
    Center = 2,
    Justify = 3
}
enum TextDirection:uint8 {
    Ltr = 0,
    Rtl = 1,
    //mixed = 2, // TODO
}
table CmdRenderParagraph {
    imfont: uint64; // FIXME
    size: float;
    pos: SingleVec2;
    col: uint32;
    clip_rect: SingleVec4;
    text: string;
    wrap_width: float;
    letter_spacing: float;
    text_align: TextAlignFlags;
    text_direction: TextDirection;
}
table CmdRenderUnicodeCodepoint {
    imfont: uint64; // FIXME
    size: float;
    pos: SingleVec2;
    col: uint32;
    clip_rect: SingleVec4;
    codepoint: uint32;
}
table CmdTranslation {
    translation: SingleVec2;
}
table PopTranslation {
}
table CmdPushRotation {
    cos_alpha: float;
    sin_alpha: float;
}
table CmdPopRotation {
}
table CmdRectFilledMultiColor {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col_upr_left: uint32;
    col_upr_right: uint32;
    col_bot_right: uint32;
    col_bot_left: uint32;
}
table CmdWrappedDrawList {
    buffer: [ubyte] (nested_flatbuffer: "DrawList");
}
table CmdVertexDraw {
    clip_rect: SingleVec4;
    element_count: uint32;
    index_offset: uint32;
    vtx_offset: uint32;
}
table CmdSimpleVertexDraw {
    clip_rect: SingleVec4;
    pos_xy: [float];
    col: uint32;
}
// Supported are: Q, M, L, C, Z, q, m, l, c, z SVG path commands (relative or absolute coordinates)
table CmdSvgPathSubset {
    svg: string;
    col: uint32;
    stroke: bool;
    fill: bool;
}
enum PathVerb:uint8 {
    Move = 0, // 1 point
    Line = 1, // 2 points
    Quad = 2, // 3 points
    Conic = 3, // 3 points + 1 weight
    Cubic = 4, // 4 points
    Close = 5, // 0 points
    Done = 6,
}
enum PathFillType:uint8 {
    /** Specifies that "inside" is computed by a non-zero sum of signed edge crossings */
    Winding = 0,
    /** Specifies that "inside" is computed by an odd number of edge crossings */
    EvenOdd = 1,
    /** Same as Winding, but draws outside of the path, rather than inside */
    InverseWinding = 2,
    /** Same as EvenOdd, but draws outside of the path, rather than inside */
    InverseEvenOdd = 3
}
table CmdPath {
    offset: SingleVec2;
    verbs: [PathVerb];
    points_xy: [float];
    conic_weights: [float];
    col: uint32;
    stroke: bool;
    fill: bool;
    fill_type : PathFillType;
}
union VectorCmdArg {
    CmdRegisterFont,
    CmdPolyline,
    CmdConvexPolyFilled,
    CmdConcavePolyFilled,
    CmdLine,
    CmdRectRounded,
    CmdRectRoundedCorners,
    CmdRectRoundedFilled,
    CmdRectRoundedCornersFilled,
    CmdQuad,
    CmdQuadFilled,
    CmdTriangle,
    CmdTriangleFilled,
    CmdCircle,
    CmdCircleFilled,
    CmdNgon,
    CmdNgonFilled,
    CmdEllipse,
    CmdEllipseFilled,
    CmdBezierCubic,
    CmdBezierQuadratic,
    CmdImage,
    CmdImageQuad,
    CmdImageRounded,
    CmdPushClipRect,
    CmdPopClipRect,
    CmdRenderText,
    CmdRenderParagraph,
    CmdRenderUnicodeCodepoint,
    CmdRectFilledMultiColor,
    CmdWrappedDrawList,
    CmdVertexDraw,
    CmdPushRotation,
    CmdPopRotation,
    CmdSimpleVertexDraw,
    CmdSvgPathSubset,
    CmdPath,
}

table SingleVectorCmdDto {
    arg: VectorCmdArg;
}
enum DrawListFlags:uint8 { 
    None = 0,
    AntiAliasedLines = 1,
    AntiAliasedFill = 2,
    AntiAliasedText = 4,
    AntiAliasedClipping = 8
}
table VertexData {
    pos_xy: [float];
    texture_uv: [float];
    col: [uint32];
    indices: [uint16];
}
table DrawList {
    flags : DrawListFlags;
    name : string;
    vertices: VertexData;
    cmds : [SingleVectorCmdDto];
}
enum IoFlags:uint16 { 
    None = 0,
    WantCaptureMouse = 1,
    WantCaptureKeyboard = 2,
    WantTextInput = 4,
    WantSetMousePos = 8,
    NavIsActive = 16,
    NavIsVisible = 32,
}
table IoRecord {
    flags : IoFlags;
}

table EventClientConnect {
    desc: string;
}
table EventClientDisconnect {
    desc: string;
}
table EventClientKeepAlive {
}
table EventMouseMotion {
    pos: SingleVec2;
    mouse_id: uint32;
    is_touch: bool;
}
table EventMouseWheel {
    pos: SingleVec2;
    mouse_id: uint32;
    is_touch: bool;
}
enum MouseButtons:uint8 (bit_flags) {
    Left = 0,
    Middle = 1,
    Right = 2,
    X1 = 3,
    X2 = 4,
}
enum MouseButtonEventType:uint8 {
    Up = 0,
    Down = 1,
}
table EventMouseButton {
    pos: SingleVec2;
    mouse_id: uint32;
    is_touch: bool;
    buttons: MouseButtons;
    type: MouseButtonEventType;
}
table EventTextInput {
    text: string;
}
enum KeyModifiers:uint16 (bit_flags) {
    LeftShift = 0,
    RightShift = 1,
    LeftCtrl = 2,
    RightCtrl = 3,
    LeftAlt = 4,
    RightAlt = 5,
    LeftSuper = 6,
    RightSuper = 7,
    NumLock = 8,
    CapsLock = 9,
    Mode = 10,
    ScrolLock = 11,
}
enum KeyCode:uint32 {
    Key_None=0,
    Key_Tab,
    Key_LeftArrow,
    Key_RightArrow,
    Key_UpArrow,
    Key_DownArrow,
    Key_PageUp,
    Key_PageDown,
    Key_Home,
    Key_End,
    Key_Insert,
    Key_Delete,
    Key_Backspace,
    Key_Space,
    Key_Enter,
    Key_Escape,
    Key_Apostrophe,
    Key_Comma,
    Key_Minus,
    Key_Period,
    Key_Slash,
    Key_Semicolon,
    Key_Equal,
    Key_LeftBracket,
    Key_Backslash,
    Key_RightBracket,
    Key_GraveAccent,
    Key_CapsLock,
    Key_ScrollLock,
    Key_NumLock,
    Key_PrintScreen,
    Key_Pause,
    Key_Keypad0,
    Key_Keypad1,
    Key_Keypad2,
    Key_Keypad3,
    Key_Keypad4,
    Key_Keypad5,
    Key_Keypad6,
    Key_Keypad7,
    Key_Keypad8,
    Key_Keypad9,
    Key_KeypadDecimal,
    Key_KeypadDivide,
    Key_KeypadMultiply,
    Key_KeypadSubtract,
    Key_KeypadAdd,
    Key_KeypadEnter,
    Key_KeypadEqual,
    Key_LeftCtrl,
    Key_LeftShift,
    Key_LeftAlt,
    Key_LeftSuper,
    Key_RightCtrl,
    Key_RightShift,
    Key_RightAlt,
    Key_RightSuper,
    Key_Menu,
    Key_0,
    Key_1,
    Key_2,
    Key_3,
    Key_4,
    Key_5,
    Key_6,
    Key_7,
    Key_8,
    Key_9,
    Key_A,
    Key_B,
    Key_C,
    Key_D,
    Key_E,
    Key_F,
    Key_G,
    Key_H,
    Key_I,
    Key_J,
    Key_K,
    Key_L,
    Key_M,
    Key_N,
    Key_O,
    Key_P,
    Key_Q,
    Key_R,
    Key_S,
    Key_T,
    Key_U,
    Key_V,
    Key_W,
    Key_X,
    Key_Y,
    Key_Z,
    Key_F1,
    Key_F2,
    Key_F3,
    Key_F4,
    Key_F5,
    Key_F6,
    Key_F7,
    Key_F8,
    Key_F9,
    Key_F10,
    Key_F11,
    Key_F12,
    Key_F13,
    Key_F14,
    Key_F15,
    Key_F16,
    Key_F17,
    Key_F18,
    Key_F19,
    Key_F20,
    Key_F21,
    Key_F22,
    Key_F23,
    Key_F24,
    Key_AppBack,
    Key_AppForward,
}
table EventKeyboard {
    modifiers: KeyModifiers;
    code: KeyCode;
    is_down: bool;
    native_sym: uint32;
    scancode: uint32;
}
union UserInteraction {
    EventClientConnect,
    EventClientDisconnect,
    EventClientKeepAlive,
    EventMouseMotion,
    EventMouseWheel,
    EventMouseButton,
    EventTextInput,
    EventKeyboard,
}
table InputEvent {
    event: UserInteraction;
}

root_type DrawList;
