namespace VectorCmdFB;

struct SingleVec2 {
    x: float;
    y: float;
}
struct SingleVec4 {
    x: float;
    y: float;
    z: float;
    w: float;
}
table ArrayOfVec2 {
    xs: [float];
    ys: [float];
}
table ArrayOfVec4 {
    xs: [float];
    ys: [float];
    zs: [float];
    ws: [float];
}
table CmdRegisterFont {
    name: string;
    url: string;
    subpixel: bool;
}
table CmdPolyline {
    points: ArrayOfVec2;
    col: uint32;
    flags: uint32; // ImDrawFlags
    thickness: float;
}
table CmdConvexPolyFilled {
    points: ArrayOfVec2;
    col: uint32;
}
table CmdLine {
    p1: SingleVec2;
    p2: SingleVec2;
    col: uint32;
    thickness: float;
}
table CmdRectRounded {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding: float;
    thickness: float;
}
table CmdRectRoundedCorners {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding_top_left: float;
    rounding_top_right: float;
    rounding_bottom_right: float;
    rounding_bottom_left: float;
    thickness: float;
}
table CmdRectRoundedFilled {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding: float;
}
table CmdRectRoundedCornersFilled {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col: uint32;
    rounding_top_left: float;
    rounding_top_right: float;
    rounding_bottom_right: float;
    rounding_bottom_left: float;
}
table CmdQuad {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    col: uint32;
    thickness: float;
}
table CmdQuadFilled {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    col: uint32;
}
table CmdTriangle {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    col: uint32;
    thickness: float;
}
table CmdTriangleFilled {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    col: uint32;
}
table CmdCircle {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
    thickness: float;
}
table CmdCircleFilled {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
}
table CmdNgon {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
    thickness: float;
}
table CmdNgonFilled {
    center: SingleVec2;
    radius: float;
    col: uint32;
    num_segments: int;
}
table CmdEllipse {
    center: SingleVec2;
    radius_x: float;
    radius_y: float;
    col: uint32;
    rot: float;
    num_segments: int;
    thickness: float;
}
table CmdEllipseFilled {
    center: SingleVec2;
    radius_x: float;
    radius_y: float;
    col: uint32;
    rot: float;
    num_segments: int;
}
table CmdBezierCubic {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    col: uint32;
    thickness: float;
    num_segments: int;
}
table CmdBezierQuadratic {
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    col: uint32;
    thickness: float;
    num_segments: int;
}
table CmdImage {
    user_texture_id: uint64; // ImTextureID
    p_min: SingleVec2;
    p_max: SingleVec2;
    uv_min: SingleVec2;
    uv_max: SingleVec2;
    col: uint32;
}
table CmdImageQuad {
    user_texture_id: uint64; // ImTextureID
    p1: SingleVec2;
    p2: SingleVec2;
    p3: SingleVec2;
    p4: SingleVec2;
    uv1: SingleVec2;
    uv2: SingleVec2;
    uv3: SingleVec2;
    uv4: SingleVec2;
    col: uint32;
}
table CmdImageRounded {
    user_texture_id: uint64; // ImTextureID
    p_min: SingleVec2;
    p_max: SingleVec2;
    uv_min: SingleVec2;
    uv_max: SingleVec2;
    col: uint32;
    rounding: float;
    flags: uint32; // ImDrawFlags
}
table CmdPushClipRect {
    rect: SingleVec4;
    intersected_with_current_clip_rect : bool;
}
table CmdPopClipRect {
}
table CmdRenderText {
    imfont: uint64; // FIXME
    size: float;
    pos: SingleVec2;
    col: uint32;
    clip_rect: SingleVec4;
    text: string;
}
enum TextAlignFlags:uint8 {
    left = 0,
    right = 1,
    center = 2,
    justify = 3
}
table CmdRenderParagraph {
    imfont: uint64; // FIXME
    size: float;
    pos: SingleVec2;
    col: uint32;
    clip_rect: SingleVec4;
    text: string;
    wrap_width: float;
    letter_spacing: float;
    text_align: TextAlignFlags;
}
table CmdTranslation {
    translation: SingleVec2;
}
table PopTranslation {
}
table CmdPushRotation {
    cos_alpha: float;
    sin_alpha: float;
}
table CmdPopRotation {
}
table CmdRectFilledMultiColor {
    p_min: SingleVec2;
    p_max: SingleVec2;
    col_upr_left: uint32;
    col_upr_right: uint32;
    col_bot_right: uint32;
    col_bot_left: uint32;
}
table CmdWrappedDrawList {
    buffer: [ubyte] (nested_flatbuffer: "DrawList");
}
table CmdVertexDraw {
    clip_rect: SingleVec4;
    element_count: uint32;
    index_offset: uint32;
    vtx_offset: uint32;
}
union VectorCmdArg {
    CmdRegisterFont,
    CmdPolyline,
    CmdConvexPolyFilled,
    CmdLine,
    CmdRectRounded,
    CmdRectRoundedCorners,
    CmdRectRoundedFilled,
    CmdRectRoundedCornersFilled,
    CmdQuad,
    CmdQuadFilled,
    CmdTriangle,
    CmdTriangleFilled,
    CmdCircle,
    CmdCircleFilled,
    CmdNgon,
    CmdNgonFilled,
    CmdEllipse,
    CmdEllipseFilled,
    CmdBezierCubic,
    CmdBezierQuadratic,
    CmdImage,
    CmdImageQuad,
    CmdImageRounded,
    CmdPushClipRect,
    CmdPopClipRect,
    CmdRenderText,
    CmdRenderParagraph,
    CmdRectFilledMultiColor,
    CmdWrappedDrawList,
    CmdVertexDraw,
    CmdPushRotation,
    CmdPopRotation
}

table SingleVectorCmdDto {
    arg: VectorCmdArg;
}
enum DrawListFlags:uint8 { 
    None = 0,
    AntiAliasedLines = 1,
    AntiAliasedFill = 2,
    AntiAliasedText = 4,
    AntiAliasedClipping = 8
}
table VertexData {
    pos_xy: [float];
    texture_uv: [float];
    col: [uint32];
    indices: [uint16];
}
table DrawList {
    flags : DrawListFlags;
    name : string;
    vertices: VertexData;
    cmds : [SingleVectorCmdDto];
}
enum IoFlags:uint16 { 
    None = 0,
    WantCaptureMouse = 1,
    WantCaptureKeyboard = 2,
    WantTextInput = 4,
    WantSetMousePos = 8,
    NavIsActive = 16,
    NavIsVisible = 32,
}
table IoRecord {
    flags : IoFlags;
}

root_type DrawList;